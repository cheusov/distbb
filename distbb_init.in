#!/bin/sh

# Copyright (c) 2007-2008 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

######################################################################

set -e
. pipestatus

# usage: distbb_init BUILD_START UPDATE_SRC_SUMMARY PKG_SRC_PACKAGES
test $# -eq 4

# init
BUILD_START="$1"
pkg_src_update_summary="$2"
pkg_src_packages="$3"
date_start="$4"

if test "$THIS_IS_ME"; then
    . /home/cheusov/pkg_distbb/etc/distbb.conf
else
    . @@sysconfdir@@/distbb.conf
fi

REPORT1_DIR=$REPORTS_DIR/$BUILD_START
test -n "$REPORT1_DIR" # who knows...
rm -rf $REPORT1_DIR
. @@libexecdir@@/distbb_common

echo "$date_start" > $date_start_fn

# main
verbose_print "Preparations\n"

printf '' > $packages_failed_deps_fn
printf '' > $packages_failed_fn
printf '' > $packages_built_prev_fn
printf '' > $packages_built_fn

######################################################################

refreshed_summary_fn=$tmpdir/refreshed_summary.tmp
verbose_print "  updating pkg_summary.txt..."
pkg_update_summary $pkg_summary $PACKAGES/All
pkg_refresh_summary $pkg_summary >$refreshed_summary_fn
verbose_print "done\n"

######################################################################

verbose_print "  clean-up package list..."

if test $pkg_src_packages; then
    awk '
{
   sub(/#.*$/, "")
}
NF > 0 {
   print $1
}' $pkg_src_packages > $tmpdir/packages.tmp

    pkg_src_packages=$tmpdir/packages.tmp
fi

verbose_print "done\n"

######################################################################
### extracting DEPENDS and BUILDS_DEPENDS
extract_depends (){
    awk -v deps_fn="$deps_fn" -v bdeps_fn="$bdeps_fn" '
/^PKGNAME=/ {
   pkgname = substr($0, 9)
   next
}

/^PKGPATH=/ {
   pkgpath = substr($0, 9)
   next
}

/^DEPENDS=/ {
   $0 = substr($0, 9)
   gsub(/[^ \t]+:[.][.]\/[.][.]\//, "")

   for (i=1; i <= NF; ++i){
      deps [$i] = 1
   }
   for (i in deps){
      print pkgname, i, pkgpath > deps_fn
   }
   delete deps

   next
}

/^BUILD_DEPENDS=/ {
   $0 = substr($0, 15)
   gsub(/[^ \t]+:[.][.]\/[.][.]\//, "")

   for (i=1; i <= NF; ++i){
      deps [$i] = 1
   }
   for (i in deps){
      print pkgname, i, pkgpath > bdeps_fn
   }
   delete deps

   next
}

NF == 0 && curr_pkgpath == pkgpath {
   print pkgname
   print deps
   print bdeps
}
' "$PKG_SRC_SUMMARY"

    bootstr_deps="$(cd $PKGSRCDIR/devel/bmake && $BMAKE show-var VARNAME=BOOTSTRAP_DEPENDS | sed 's,[^ ]*[.][.]/[.][.]/,,g')"

    printf '' > $bsdeps_fn
    for d in $bootstr_deps; do
	awk -v d=$d -F= '$1 == "PKGPATH" {print d, $2}' \
	    $PKG_SRC_SUMMARY > $bsdeps_fn
    done
}

deps_fn=$tmpdir/deps.tmp
bdeps_fn=$tmpdir/bdeps.tmp
bsdeps_fn=$tmpdir/bsdeps.tmp

if test -z "$pkg_src_update_summary"; then
    verbose_print "  Updating pkg_src_summary..."
    pkg_src_update_summary "$PKG_SRC_SUMMARY"
    verbose_print "done\n"
fi

verbose_print "  Dependencies from pkg_src_summary file..."
extract_depends
verbose_print "done\n"

######################################################################
### input: graph as a list of arcs
### output: transitive close of this graph
transitive_closure (){
    awk '
# AWK badly suits for this task :-(

BEGIN {
   SUBSEP = " "
}

{
   arc [$1, $2] = 1

   outgoing [$1] = outgoing [$1] " " $2
   incoming [$2] = incoming [$2] " " $1

   nodes [$1] = 1
   nodes [$2] = 1
}

END {
   for (k in nodes){
      cnt_i = split(incoming [k], arr_i)
      for (ii = 1; ii <= cnt_i; ++ii){
         i = arr_i [ii]

         cnt_j = split(outgoing [k], arr_j)
         for (jj = 1; jj <= cnt_j; ++jj){
            j = arr_j [jj]
            if (! ((i SUBSEP j) in arc)){
               arc [i, j] = 1
               incoming [j] = incoming [j] " " i
               outgoing [i] = outgoing [i] " " j
            }
         }
      }
   }

   for (idx in arc){
      print idx
   }
}
' "$@"
}

extract_dep (){
    awk '
NF == 3 {
   print $2, $3
}' "$@"
}

verbose_print "  Transitive closure of the dependancy graph..."
trans_clos_fn=$tmpdir/trans_closure.tmp
runpipe0 \
    extract_dep $deps_fn $bdeps_fn $bsdeps '|' \
    transitive_closure > $trans_clos_fn
verbose_print "done\n"

######################################################################
### comparison binaries against pkgsrc tree
verbose_print "  pkg_summary vs. pkg_src_summary comparison..."
cmp_fn=$tmpdir/cmp.tmp
pkg_cmp_summary -p $refreshed_summary_fn $PKG_SRC_SUMMARY > $cmp_fn
verbose_print "done\n"

awk '($1 == "=") {print $2}' $cmp_fn \
    > $packages_built_prev_fn

######################################################################
### direct packages that need to be rebuilt
verbose_print "  List of packages to be built..."
rebuild1_fn=$tmpdir/rebuild1.tmp
rebuild2_fn=$tmpdir/rebuild2.tmp
rebuild3_fn=$tmpdir/rebuild3.tmp
awk '($1 != "=") && ($1 != "-") {print $2}' $cmp_fn > $rebuild1_fn

filter_rebuild2 (){
    # also selects packages required by a given package
    awk -v pkg_src_packages="$pkg_src_packages" '
BEGIN {
   while (getline < pkg_src_packages){
      hash [$1] = 1
      print $1
   }
}

$2 in hash {
   print $1
}
' "$@"
}

grep_packages (){
    awk -v pkgs=$1 '
BEGIN {
   while ((getline < pkgs) > 0){
      hash [$1] = 1
   }
}

$1 in hash
' $2
}

if test $pkg_src_packages; then
    filter_rebuild2 $trans_clos_fn > $rebuild3_fn

    grep_packages $rebuild3_fn $rebuild1_fn > $rebuild2_fn

    rebuild1_fn=$rebuild2_fn
fi
verbose_print "done\n"

######################################################################
### only those dependancies that depend on packages that need to be rebuilt
filter_rebuild1 (){
    # also selects packages that depends on a given package
    awk \
	-v rebuild1_fn="$rebuild1_fn" \
	-v pkg_src_packages="$pkg_src_packages" '
BEGIN {
   while (getline < rebuild1_fn){
      hash [$1] = 1
   }
}

($1 in hash) && (pkg_src_packages == "" || ($2 in hash)) {
   print $0
}
' "$@"
}

######################################################################
verbose_print "  Packages to be built with their dependancies..."

filter_rebuild1 $trans_clos_fn > $trans_clos_rebuild_fn

verbose_print "done\n"

######################################################################
### counted list of packages / queue
count_deps (){
awk '
NF == 2 { count [$2] += 1 }
NF == 1 { count [$1] += 0 }
END {
   for (i in count)
      print i, count [i]
}
' "$@"
}

verbose_print "  Initial queue..."
count_deps $rebuild1_fn $trans_clos_rebuild_fn > $queue_fn
verbose_print "done\n"

queue__ready_to_be_built (){
    awk '$2 == 0 {print $1}' $queue_fn
}
