#!/bin/sh

# Copyright (c) 2007-2008 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

######################################################################

set -e
. pipestatus

export LC_ALL=C
############################################################
tmpdir=/tmp/distbb_build.$$
#trap "rm -rf $tmpdir" 0 1 2 15

mkdir -m 700 $tmpdir

######################################################################
set_if_not_set (){
    # $1 - varname
    # $2 - value
    if eval test -z "\$$1"; then
	eval $1="'$2'"
    fi
}

set_if_not_set BMAKE           make
set_if_not_set PKGSRCDIR       /usr/pkgsrc
set_if_not_set PKG_SRC_SUMMARY $PKGSRCDIR/pkg_src_summary.txt
set_if_not_set PACKAGES        $PKGSRCDIR/packages
set_if_not_set PKG_SUMMARY     $PACKAGES/pkg_summary.gz
set_if_not_set PKG_SUFX        .tgz
set_if_not_set REPORTS_DIR     $HOME/bulk-logs
set_if_not_set TARGETS         'clean package checksum build install package'

######################################################################

header (){
    printf ' --**--**-- %8s --**--**--\n' "$1"
}

extract_depends (){
    awk -v deps_fn="$deps_fn" -v bdeps_fn="$bdeps_fn" '
/^PKGNAME=/ {
   pkgname = substr($0, 9)
   next
}

/^PKGPATH=/ {
   pkgpath = substr($0, 9)
   next
}

/^DEPENDS=/ {
   $0 = substr($0, 9)
   gsub(/[^ \t]+:[.][.]\/[.][.]\//, "")

   for (i=1; i <= NF; ++i){
      print pkgname, $i, pkgpath > deps_fn
   }

   next
}

/^BUILD_DEPENDS=/ {
   $0 = substr($0, 15)
   gsub(/[^ \t]+:[.][.]\/[.][.]\//, "")

   for (i=1; i <= NF; ++i){
      print pkgname, $i, pkgpath > bdeps_fn
   }

   next
}

NF == 0 && curr_pkgpath == pkgpath {
   print pkgname
   print deps
   print bdeps
}
' $PKG_SRC_SUMMARY
}

######################################################################
#
rm -rf $REPORTS_DIR

#
deps_fn=$tmpdir/deps.txt
bdeps_fn=$tmpdir/bdeps.txt

extract_depends

#
transitive_closure (){
    awk '
# AWK badly suits for this task :-(

BEGIN {
   SUBSEP = " "
}

{
   arc     [$1, $2] = 1

   outgoing [$1] = outgoing [$1] " " $2
   incoming [$2] = incoming [$2] " " $1

   nodes [$1] = 1
   nodes [$2] = 1
}

END {
   for (k in nodes){
      cnt_i = split(incoming [k], arr_i)
      for (ii = 1; ii <= cnt_i; ++ii){
         i = arr_i [ii]

         cnt_j = split(outgoing [k], arr_j)
         for (jj = 1; jj <= cnt_j; ++jj){
            j = arr_j [jj]
            if (! ((i SUBSEP j) in arc)){
               arc [i, j] = 1
               incoming [j] = incoming [j] " " i
               outgoing [i] = outgoing [i] " " j
            }
         }
      }
   }

   for (idx in arc){
      print idx
   }
}
' "$@"
}

#
txt_summary=$tmpdir/pkg_summary.txt
if echo $PKG_SUMMARY | grep '[.]gz$' > /dev/null; then
    gzip -dc $PKG_SUMMARY > $txt_summary
    PKG_SUMMARY=$txt_summary
elif echo $PKG_SUMMARY | grep '[.]bz2$' > /dev/null; then
    bzip2 -dc $PKG_SUMMARY > $txt_summary
    PKG_SUMMARY=$txt_summary
fi

#
cmp_fn=$tmpdir/cmp.txt
pkg_cmp_summary -p $PKG_SUMMARY $PKG_SRC_SUMMARY > $cmp_fn

#
rebuild1_fn=$tmpdir/rebuild1.txt
awk '($1 != "=") && ($1 != "-") {print $2}' $cmp_fn > $rebuild1_fn

#
extract_dep (){
    awk '
NF == 3 {
   print $2, $3
}' "$@"
}

trans_clos_fn=$tmpdir/trans_closure.txt
runpipe0 \
    extract_dep $deps_fn $bdeps_fn '|' \
    transitive_closure > $trans_clos_fn

#
filter_rebuild1 (){
    awk -v rebuild1_fn="$rebuild1_fn" '
BEGIN {
   while (getline < rebuild1_fn){
      hash [$1] = 1
   }
}

$1 in hash {
   print $0
}
' "$@"
}

trans_clos_rebuild_fn=$tmpdir/trans_closure_rebuild.txt
filter_rebuild1 $trans_clos_fn > $trans_clos_rebuild_fn

#
queue_fn=$tmpdir/queue.txt
awk '
{
   degree [$NF] += (NF == 2)
}
END {
   for (pkg in degree){
      print pkg, degree [pkg]
   }
}
' $rebuild1_fn $trans_clos_rebuild_fn > $queue_fn
