#!/bin/sh

# Copyright (c) 2008-2011 Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# See LICENSE file

######################################################################

set -e

: ${DISTBB_CONF:=@sysconfdir@/distbb.conf}
. "$DISTBB_CONF"

. @root_libexecdir@/psu/sig_handler.sh
on_exit () { rm -rf $tmp_dir; }

unset PKG_PATH || true
unset PKG_SUFX || true

export PKGSRCDIR
export PACKAGES
export BINPKG_SITES="$PACKAGES"
export DISTBB_CONF

if test -n "$DISTDIR"; then
    export DISTDIR
fi

eval "$SLAVE_CMD" 1>&2

######################################################################
# temp directory
tmp_dir=`mktemp -d /tmp/distbb_slave.XXXXXX`
test -n "$tmp_dir"

tmpfn="$tmp_dir/tmpfn.tmp"
logfn="$tmp_dir/log.tmp"
######################################################################

usage (){
    cat 1>&2 <<EOF
slave - program run on slave hosts

usage: slave [OPTIONS]
OPTIONS:
  -h|--help              display this help message
EOF
}

while test $# -ne 0; do
    case "$1" in
	-h|--help)
	    usage
	    exit 0;;
	--)
	    shift
	    break;;
	-*)
	    echo "Bad option $1" 1>&2
	    exit 1;;
	*)
	    break
    esac
    shift
done

if test $# -ne 0; then
    usage
    exit 1
fi

######################################################################
# exporting for special target Init

get_var (){
    ${BMAKE} "$@" -f - my-show-var BSD_PKG_MK=yes <<'EOF'
.PHONY: my-show-var
my-show-var:
	@echo ${${VARNAME}:Q}
EOF
}

if test -n "$TARGET_MAKECONF"; then
    export TARGET_PACKAGES=`get_var -f $TARGET_MAKECONF VARNAME=PACKAGES`
    export TARGET_PKG_DBDIR=`get_var -f $TARGET_MAKECONF VARNAME=PKG_DBDIR`
    export TARGET_PREFIX=`get_var -f $TARGET_MAKECONF VARNAME=LOCALBASE`
    export TARGET_SYSROOT=`get_var -f $TARGET_MAKECONF VARNAME=SYSROOT`
    export TARGET_ARCH=`get_var -f $TARGET_MAKECONF VARNAME=TARGET_ARCH`
fi

export EXTRACT_BOOTSTRAP_CMD
export RMDIRS_CMD

######################################################################

header (){
    printf ' --**--**-- %8s --**--**--\n' "$1"
}

# remove comments from "$SPECIAL_PACKAGES"
remove_comments (){
    awk '
    NF == 0 {
	print
	next
    }
    {
	sub(/#.*$/, "")
	if (NF > 0) {
	    $1 = $1
	    print
	}
    }' "$@"
}

save_TARGETS_and_EXTRA_OPTS (){
    orig_TARGETS="$TARGETS"
    orig_BMAKE_EXTRA_OPTS="$BMAKE_EXTRA_OPTS"
}

restore_TARGETS_and_EXTRA_OPTS (){
    TARGETS="$orig_TARGETS"
    BMAKE_EXTRA_OPTS="$orig_BMAKE_EXTRA_OPTS"
}

run_bmake() ( # subprocess due to ULIMIT_CMD!
    # $1 -- target
    eval "$ULIMIT_CMD"
    eval "\$SU_UNPRIV_CMD_$1" \
	 env $bmake_env $BMAKE -f Makefile \
	 -f "$DISTBB_LOCAL_MK" \
	 -f @datadir@/distbb.mk \
	 $bmake_opts "$1" < /dev/null
)

run_bmake_with_repeat() {
    # $1 -- target
    run_bmake "$1"
    _ex=$?
    if test $_ex != 0 -a checksum = "$1"; then
	# clean distfiles and repeat
	run_bmake CleanDistfiles
	run_bmake "$t"
	_ex=$?
    fi
    return $_ex
}

do_run_target(){
    # $1 -- target
    header "$t"
    case "$t" in
	Init)
	    # remove /usr/pkg and unpack bootstrap
	    # unset LD_PRELOAD before removing libkver.so
	    ld_preload_backup="$LD_PRELOAD"
	    unset LD_PRELOAD || true
	    eval $RMDIRS_CMD
	    eval $EXTRACT_BOOTSTRAP_CMD
	    if test -n "$LIBKVER_OSRELEASE"; then
		export LIBKVER_OSRELEASE
		if test -n "$ld_preload_backup"; then
		    export LD_PRELOAD="$ld_preload_backup"
		fi
	    fi
	    ;;
	*)
	    bmake_env="$bmake_env PKGPATHe=$1"

	    run_bmake_with_repeat "$t" || return $?
	    ;;
    esac
}

do_build_package (){
    # $1 - long pkgpath, e.g. www/php-apc:PHP_VERSION_REQD=5
    # $2 - real pkgpath, e.g. www/php-apc

    header preinit >> "$logfn"

    # new targets? new extra_opts?
    echo "$SPECIAL_PACKAGES" |
    remove_comments |
    pkg_grep_summary 'PKGPATH' "\$2 == \"$1\"" > $tmpfn

    new_TARGETS="`sed -n 's,^TARGETS=,,p' $tmpfn`"

    if test "$new_TARGETS"; then
	TARGETS="$new_TARGETS"
    fi

    new_BMAKE_EXTRA_OPTS="`sed -n 's,^BMAKE_EXTRA_OPTS=,,p' $tmpfn`"
    if test "$new_BMAKE_EXTRA_OPTS"; then
	BMAKE_EXTRA_OPTS="$new_BMAKE_EXTRA_OPTS"
    fi

    #
    if ! cd "$PKGSRCDIR/$2"; then
	return 1
    fi

    # $TARGETS
    bmake_opts="$BMAKE_EXTRA_OPTS $multivar_opts"
    export bmake_opts

    for t in $TARGETS; do
	echo "${t}_start: `$EPOCH_SECONDS_CMD`"
	set +e
	do_run_target "$t" >> "$logfn" 2>&1
	ex=$?
	echo "${t}_end: `$EPOCH_SECONDS_CMD`"
	set -e
	if test $ex -ne 0; then
	    return $ex
	fi
    done
}

pkgpath2multivar_opts (){
    sed -e 's|^[^:]*:||' -e 's|,| |g' -e "s|[^ ][^ ]*|'&'|g" -e 's|~| |g'
}

build_package (){
    # $1 - long pkgpath, e.g. www/php-apc:PHP_VERSION_REQD=5
    multivar_opts=''
    unset MAKECONF || true # ksh, dash, pdksh

    long_pkgpath="$1"

    real_pkgpath="`echo $long_pkgpath | cut -d: -f1`"
    if test "$real_pkgpath" != "$long_pkgpath"; then
	multivar_opts="$(echo $long_pkgpath | pkgpath2multivar_opts)"
    fi

    do_build_package "$long_pkgpath" "$real_pkgpath" 2>&1
    ex=$?

    if test -n "${TH_pkg}"; then
	bmake_env="MAKECONF=$TARGET_MAKECONF"
    else
	bmake_env=
    fi

    # clean even if it fails
    run_bmake "$CLEAN_TARGET" >/dev/null 2>&1

    unset MAKECONF || true # ksh, dash, pdksh

    #
    return $ex
}

save_TARGETS_and_EXTRA_OPTS

while read pkgpath; do
    restore_TARGETS_and_EXTRA_OPTS

    if build_package "$pkgpath"; then
	echo success
    else
	awk '{print " " $0}' "$logfn"
	echo failure
    fi

    #
    echo "$PAEXEC_EOT"
done
