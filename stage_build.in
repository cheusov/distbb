#!/bin/sh

# Copyright (c) 2008-2011 Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# See LICENSE file

######################################################################

set -e
set -o pipefail

# usage: stage_upload_logs BUILD_ID
test $# -eq 1

# init
BUILD_ID="$1"

: ${DISTBB_CONF:=@sysconfdir@/distbb.conf}
. "$DISTBB_CONF"
. @libexecdir@/common

export eot='d0b586170bd6117bea00144c86207e0e'

# main
######################################################################
cd "$REPORT1_DIR"

dep_graph_to_build_fn="$tmpdir/dep_graph_to_build.tmp"
packages_to_rebuild_fn="$tmpdir/packages_to_rebuild.tmp"

######################################################################
### graph of packages for paexec
verbose_print "  initial queue..."

@libexecdir@/gen_queue -f "$progress_fn" "$rebuild_PAe_fn" > "$dep_graph_to_build_fn"
$WEIGH_PACKAGES_CMD -f "$dep_graph_to_build_fn" "$processed_pkg_src_summary_fn" > "$dep_graph_to_build_fn.tmp"
cat "$dep_graph_to_build_fn.tmp" >> "$dep_graph_to_build_fn"
rm "$dep_graph_to_build_fn.tmp"

verbose_print '\n'

######################################################################
### packages to build

verbose_print '  dependency graph to build: %s\n' "$dep_graph_to_build_fn"
awk '
NF==2 {
   h[$1] = h[$2] = 0
}
NF==1 {
   h[$1] = 0
}
END {
   for (p in h) print p
}' "$dep_graph_to_build_fn" > "$packages_to_rebuild_fn"
verbose_print "  packages to build: %s\n" "$packages_to_rebuild_fn"

verbose_print "  #packages to build: %s\n" $(awk 'END {print NR}' "$packages_to_rebuild_fn")

######################################################################
### main loop - building

postfilter (){
    # postprocessor for paexec's output.
    # It shows progress, success and failure messages,
    # redirects build logs to bulk_log/pkgpath directory,
    # recalculates counters in a queue file
    # removes unneeded bulk_log/pkgpath directories etc.
runawk \
   -v report1_dir="$REPORT1_DIR" \
   -v packages_failed_fn="$packages_failed_fn.tmp" \
   -v packages_failed_notavail_fn="$packages_failed_notavail_fn.tmp" \
   -v progress_fn="$progress_fn" \
   -v pkg_src_summary="$processed_pkg_src_summary_fn" \
   -v eot="$eot" \
   -e '
# input line format:
#    $1 - <SLAVE_HOST>
#    $2 - <TASK_NUMBER>

#use "xclose.awk"
#use "xsystem.awk"
#use "xgetline.awk"

BEGIN {
   while (xgetline0(pkg_src_summary)){
      if ($0 ~ /^PKGPATH=/) pkgpath = substr($0, 9)
      else if ($0 ~ /^PKGNAME=/) pkgname = substr($0, 9)
      else if (NF == 0) pkgnames [pkgpath] = pkgname
   }

   i = 0
   cnt = split(ENVIRON["TARGETS"], targets_array)
   for (j = 1; j <= cnt; ++j) {
      target = targets_array[j]
      if (target != "Available" && target != "Excluded" && target != "Vars") {
         stages[i] = target
         ++i
      }
   }
}

function get_log_dir (pkgpath,            pkgname){
   pkgname = pkgnames [pkgpath]
   assert(pkgname != "", "bad pkgname=`" pkgname "`, this should not happen!")
   sub(/:.*/, "", pkgpath)  # remove options settings
   gsub(/\//, "_", pkgpath) # s|/|_|
   return report1_dir "/" pkgpath "_" pkgname
}

!($2 in pkgpaths) {
   # $3 - package name (PKGPATH)
   pkgpaths [$2] = $3
   run_on   [$2] = $1
   print "  started:", $3, "on", $1
   xsystem("mkdir -p " get_log_dir($3))

   next
}

$0 ~ /^[^ ]+ [0-9]+ (success|failure|fatal)$/ {
   status [$2] = $3
   next
}

status [$2] == "failure" && !($2 in failed_deps) {
   task_number = $2
   $1 = $2 = ""
   failed_deps [task_number] = $0
   next
}

{
   pkgpath = pkgpaths [$2]
   log_dir = get_log_dir(pkgpath)
   log_fn  = log_dir "/stage_" stage [$2] ".tmp"
}

$3 == "--**--**--" && $5 == "--**--**--" {
   if (stage [$2] != ""){
      xclose(log_fn)
   }
   stage [$2] = $4
   printf "" > (log_dir "/stage_" $4 ".tmp")

   # for detecting failed stage
   curr_stage_fn = (log_dir "/curr_stage.tmp")
   print $4 > curr_stage_fn
   xclose(curr_stage_fn)

   next
}

$0 ~ /^[^ ]+ [0-9]+  / {
   # normal log line
   sub(/^[^ ]+ [^ ]+  /, "")
   print > log_fn
   next
}

/^[^ ]+ [0-9]+ [^ ]+_start:/ {
   stage_start [substr($3, 1, length($3) - 7), $2] = $4
   next
}

/^[^ ]+ [0-9]+ [^ ]+_end:/ {
   stage_end [substr($3, 1, length($3) - 5), $2] = $4
   next
}

# end of task
{
   assert(NF == 3 && $3 == eot, "this should not happen")
   if (stage [$2] != "")
      xclose(log_fn)
}

function free_arrs (task){
   delete pkgpaths [task]
   delete run_on   [task]
   delete status [task]
   delete stage [task]
   delete failed_deps [task]
}

status [$2] == "fatal" {
   # fatal
   print "    FATAL:", pkgpath, "on", run_on [$2]
   xsystem("rm -rf " get_log_dir(pkgpaths [$2]))
   free_arrs($2)
   next
}

function print_progress(status, pkgpath,             _i, _stage){
   printf "%s %s", status, pkgpath >> progress_fn
   for (_i = 0; _i < 100 && (_i in stages); ++_i) {
      _stage = stages[_i]
      printf " %s_time=%s", _stage, stage_end[_stage, $2] - stage_start[_stage, $2] >> progress_fn
   }
   printf "\n" >> progress_fn
   xclose(progress_fn)
}

status [$2] == "success" {
   # succeeded
   print "    succeeded:", pkgpath, "on", run_on [$2]

   # removing log directory
   xsystem("rm -rf " log_dir)

   # free memory
   free_arrs($2)

   #
   print_progress("success", pkgpath)

   #
   next
}

status [$2] == "failure" {
   # failed
   if (stage [$2] ~ /^(Available|Excluded)$/){
      if (stage [$2] == "Available")
         printf "    Not Available: "
      else
         printf "    Excluded: "

      print pkgpath, "on", run_on [$2]
      print pkgpath >> packages_failed_notavail_fn
      xclose(packages_failed_notavail_fn)
   }else{
      print "    F-A-I-L-E-D", stage [$2] ":", pkgpath, "on", run_on [$2]
      print pkgpath >> packages_failed_fn
      xclose(packages_failed_fn)
   }

   # indirectly failed
   cnt = split(failed_deps [$2], failed_pkgs)
   log_fn  = log_dir "/failed_deps.txt"
   printf "" > log_fn
   for (i=2; i <= cnt; ++i){
      fpkg = failed_pkgs [i]
      print fpkg > log_fn

      fpkg_logdir = get_log_dir(fpkg)
      xsystem("mkdir -p " fpkg_logdir)
      pkgp_log_fn = fpkg_logdir "/failed_because.txt"
      print pkgpath >> pkgp_log_fn
      xclose(pkgp_log_fn) # in order to not exceed system/awk limits...
   }
   xclose(log_fn)

   # free memory
   free_arrs($2)

   #
   print_progress("failure", pkgpath)

   #
   next
}

{
   abort("this should not happen 2")
}
'
}

if ! is_true "$PARALLEL_MODE"; then
    SLAVES=+1 # building on localhost
    TRANSPORT=''
fi

verbose_print "Building\n"

env_for_slave="DISTBB_CONF=$DISTBB_CONF aux_reqd_deps_fn=$aux_reqd_deps_fn"

paexec -mt="$eot" -s $PAEXEC_EXTRA_OPTS -EI -lr -t "$TRANSPORT" -n "$SLAVES" \
       -C env $env_for_slave @libexecdir@/wrapper "$DISTBB_SLAVE" \
       < "$dep_graph_to_build_fn" |
    postfilter

######################################################################
rmdir "$REPORT1_DIR"/* 2>/dev/null || true

if test -n "$DISTBB_DIFF"; then
    printf "%s\n" "$BUILD_ID" >> "$bb_history_fn"
    env LC_ALL=C uniq "$bb_history_fn" > "$bb_history_fn.tmp"
    mv "$bb_history_fn.tmp" "$bb_history_fn"
fi

echo "$(date -u '+%Y-%m-%d %H:%M') UTC" > "$build_end_fn"
