#!/bin/sh

# Copyright (c) 2007-2008 Aleksey Cheusov <vle@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

######################################################################

set -e
. pipestatus

export LC_ALL=C # for sort and uniq

# date start for placint it to html/txt report
date_start="$(date -u '+%Y-%m-%d %H:%M') UTC"
# date start in YYYYMMDD-HHMM format
BUILD_START="$(echo $date_start | awk '{gsub(/[:-]/, ""); print $1 "-" $2}')"

if test "$THIS_IS_ME"; then
    . /home/cheusov/pkg_distbb/etc/distbb.conf
else
    . @@sysconfdir@@/distbb.conf
fi

export PKG_SUFX
unset PKG_PATH || true

######################################################################

usage (){
    cat <<EOF
distbb - distributed bulk build

usage: distbb [OPTIONS]
OPTIONS:
  -h|--help              display this help message
  -f|--file <filename>   obtain package names from
                         a specified file, - for stdin,
                         by default package names are obtained from
                         pkgsrc source tree.
  -k                     skip pkg_src_update_summary stage
EOF
}

pkg_src_packages=''

while test $# -ne 0; do
    case "$1" in
	-h|--help)
	    usage
	    exit 0;;
	-f|--file)
	    pkg_src_packages="$2"
	    shift;;
	--file=*|-f=*)
	    pkg_src_packages="$(printf '%s\n' \"$1\" | sed 's,^[^=]*=,,')";;
	-f*)
	    pkg_src_packages="$(printf '%s\n' \"$1\" | cut -b3-)";;
	-k)
	    pkg_src_update_summary=1;;
	--)
	    shift
	    break;;
	-*)
	    echo "Bad option $1" 1>&2
	    exit 1;;
	*)
	    break
    esac
    shift
done

if test $# -ne 0; then
    usage
    exit 1
fi

######################################################################

REPORT1_DIR=$REPORTS_DIR/$BUILD_START

test -n "$REPORT1_DIR" # who knows...
rm -rf $REPORT1_DIR

. @@libexecdir@@/distbb_common

echo "$date_start" > $date_start_fn

verbose_print "Preparations\n"

printf '' > $packages_failed_deps_fn
printf '' > $packages_failed_fn
printf '' > $packages_built_prev_fn
printf '' > $packages_built_fn

######################################################################

refreshed_summary_fn=$tmpdir/refreshed_summary.tmp
verbose_print "  updating pkg_summary.txt..."
pkg_summary=$PACKAGES/pkg_summary.txt
pkg_update_summary $pkg_summary $PACKAGES/All
pkg_refresh_summary $pkg_summary >$refreshed_summary_fn
verbose_print "done\n"

######################################################################

verbose_print "  clean-up package list..."

if test $pkg_src_packages; then
    awk '
{
   sub(/#.*$/, "")
}
NF > 0 {
   print $1
}' $pkg_src_packages > $tmpdir/packages.tmp

    pkg_src_packages=$tmpdir/packages.tmp
fi

verbose_print "done\n"

######################################################################
### extracting DEPENDS and BUILDS_DEPENDS
extract_depends (){
    awk -v deps_fn="$deps_fn" -v bdeps_fn="$bdeps_fn" '
/^PKGNAME=/ {
   pkgname = substr($0, 9)
   next
}

/^PKGPATH=/ {
   pkgpath = substr($0, 9)
   next
}

/^DEPENDS=/ {
   $0 = substr($0, 9)
   gsub(/[^ \t]+:[.][.]\/[.][.]\//, "")

   for (i=1; i <= NF; ++i){
      deps [$i] = 1
   }
   for (i in deps){
      print pkgname, i, pkgpath > deps_fn
   }
   delete deps

   next
}

/^BUILD_DEPENDS=/ {
   $0 = substr($0, 15)
   gsub(/[^ \t]+:[.][.]\/[.][.]\//, "")

   for (i=1; i <= NF; ++i){
      deps [$i] = 1
   }
   for (i in deps){
      print pkgname, i, pkgpath > bdeps_fn
   }
   delete deps

   next
}

NF == 0 && curr_pkgpath == pkgpath {
   print pkgname
   print deps
   print bdeps
}
' "$PKG_SRC_SUMMARY"

    bootstr_deps="$(cd $PKGSRCDIR/devel/bmake && $BMAKE show-var VARNAME=BOOTSTRAP_DEPENDS | sed 's,[^ ]*[.][.]/[.][.]/,,g')"

    printf '' > $bsdeps_fn
    for d in $bootstr_deps; do
	awk -v d=$d -F= '$1 == "PKGPATH" {print d, $2}' \
	    $PKG_SRC_SUMMARY > $bsdeps_fn
    done
}

deps_fn=$tmpdir/deps.tmp
bdeps_fn=$tmpdir/bdeps.tmp
bsdeps_fn=$tmpdir/bsdeps.tmp

if test -z "$pkg_src_update_summary"; then
    verbose_print "  Updating pkg_src_summary..."
    pkg_src_update_summary "$PKG_SRC_SUMMARY"
    verbose_print "done\n"
fi

verbose_print "  Dependencies from pkg_src_summary file..."
extract_depends
verbose_print "done\n"

######################################################################
### input: graph as a list of arcs
### output: transitive close of this graph
transitive_closure (){
    awk '
# AWK badly suits for this task :-(

BEGIN {
   SUBSEP = " "
}

{
   arc [$1, $2] = 1

   outgoing [$1] = outgoing [$1] " " $2
   incoming [$2] = incoming [$2] " " $1

   nodes [$1] = 1
   nodes [$2] = 1
}

END {
   for (k in nodes){
      cnt_i = split(incoming [k], arr_i)
      for (ii = 1; ii <= cnt_i; ++ii){
         i = arr_i [ii]

         cnt_j = split(outgoing [k], arr_j)
         for (jj = 1; jj <= cnt_j; ++jj){
            j = arr_j [jj]
            if (! ((i SUBSEP j) in arc)){
               arc [i, j] = 1
               incoming [j] = incoming [j] " " i
               outgoing [i] = outgoing [i] " " j
            }
         }
      }
   }

   for (idx in arc){
      print idx
   }
}
' "$@"
}

extract_dep (){
    awk '
NF == 3 {
   print $2, $3
}' "$@"
}

verbose_print "  Transitive closure of the dependancy graph..."
trans_clos_fn=$tmpdir/trans_closure.tmp
runpipe0 \
    extract_dep $deps_fn $bdeps_fn $bsdeps '|' \
    transitive_closure > $trans_clos_fn
verbose_print "done\n"

######################################################################
### comparison binaries against pkgsrc tree
verbose_print "  pkg_summary vs. pkg_src_summary comparison..."
cmp_fn=$tmpdir/cmp.tmp
pkg_cmp_summary -p $refreshed_summary_fn $PKG_SRC_SUMMARY > $cmp_fn
verbose_print "done\n"

awk '($1 == "=") {print $2}' $cmp_fn \
    > $packages_built_prev_fn

######################################################################
### direct packages that need to be rebuilt
verbose_print "  List of packages to be built..."
rebuild1_fn=$tmpdir/rebuild1.tmp
rebuild2_fn=$tmpdir/rebuild2.tmp
rebuild3_fn=$tmpdir/rebuild3.tmp
awk '($1 != "=") && ($1 != "-") {print $2}' $cmp_fn > $rebuild1_fn

filter_rebuild2 (){
    # also selects packages required by a given package
    awk -v pkg_src_packages="$pkg_src_packages" '
BEGIN {
   while (getline < pkg_src_packages){
      hash [$1] = 1
      print $1
   }
}

$2 in hash {
   print $1
}
' "$@"
}

grep_packages (){
    awk -v pkgs=$1 '
BEGIN {
   while ((getline < pkgs) > 0){
      hash [$1] = 1
   }
}

$1 in hash
' $2
}

if test $pkg_src_packages; then
    filter_rebuild2 $trans_clos_fn > $rebuild3_fn

    grep_packages $rebuild3_fn $rebuild1_fn > $rebuild2_fn

    rebuild1_fn=$rebuild2_fn
fi
verbose_print "done\n"

######################################################################
### only those dependancies that depend on packages that need to be rebuilt
filter_rebuild1 (){
    # also selects packages that depends on a given package
    awk \
	-v rebuild1_fn="$rebuild1_fn" \
	-v pkg_src_packages="$pkg_src_packages" '
BEGIN {
   while (getline < rebuild1_fn){
      hash [$1] = 1
   }
}

($1 in hash) && (pkg_src_packages == "" || ($2 in hash)) {
   print $0
}
' "$@"
}

######################################################################
verbose_print "  Packages to be built with their dependancies..."

trans_clos_rebuild_fn=$tmpdir/trans_closure_rebuild.tmp
filter_rebuild1 $trans_clos_fn > $trans_clos_rebuild_fn

verbose_print "done\n"

######################################################################
### counted list of packages / queue
queue_fn=$tmpdir/queue.tmp
count_deps (){
awk '
NF == 2 { count [$2] += 1 }
NF == 1 { count [$1] += 0 }
END {
   for (i in count)
      print i, count [i]
}
' "$@"
}

verbose_print "  Initial queue..."
count_deps $rebuild1_fn $trans_clos_rebuild_fn > $queue_fn
verbose_print "done\n"

queue__ready_to_be_built (){
    awk '$2 == 0 {print $1}' $queue_fn
}

######################################################################
verbose_print "  Directories for logging..."
( cd $REPORT1_DIR && awk '{print $1}' $queue_fn | xargs mkdir -p )
verbose_print "done\n"

######################################################################
### main loop - building
lckfile=$tmpdir/.lock

get_pkgpath (){
    awk -v tmp_queue_fn="$queue_fn.tmp" '
$2 == 0 {
   printf "" > tmp_queue_fn
   print $1
   ok = 1
   next
}

{
   print > tmp_queue_fn
}

END {
   exit (ok != 1)
}
' $queue_fn
}

tasks_fn=$tmpdir/tasks.tmp
print_tasks (){
    i=0
    while test -s $queue_fn; do
	$DISTBB_LOCK $$ ${lckfile}

	if get_pkgpath > $tasks_fn; then
#	    echo get_pkgpath succeeded 1>&2
	    cp ${queue_fn} $queue_fn.$i.tmp
	    mv ${queue_fn}.tmp $queue_fn
	    i=$(($i+1))

	    rm ${lckfile}
	    cat $tasks_fn
	else
#	    echo get_pkgpath failed 1>&2
	    rm ${lckfile}
	    sleep 5
	fi
    done
}

postfilter (){
    # postprocessor for paexec's outout.
    # It show progress, suceess and failure messages,
    # redirects build logs to bulk_log/pkgpath directory,
    # recalculates counters in a queue file
    # removes unneeded bulk_log/pkgpath directories etc.
awk \
   -v trans_clos_fn=$trans_clos_rebuild_fn \
   -v queue_fn=$queue_fn \
   -v lckfile=$lckfile \
   -v report1_dir=$REPORT1_DIR \
   -v meta_dir=$meta_dir \
   -v packages_failed_fn=$packages_failed_fn \
   -v packages_built_fn=$packages_built_fn \
   -v distbb_lock_pid="$DISTBB_LOCK $$" '
BEGIN {
   while (xgetline0(trans_clos_fn)){
      deps [$1, $2] = 1
      all_pkgpaths [$1] = 1
      all_pkgpaths [$2] = 1
   }
   xclose(trans_clos_fn)

   tmp_fn = (queue_fn ".tmp2")
   wait_for_lock=(distbb_lock_pid " " lckfile)
   rm_lock=("rm " lckfile)
}

!($2 in pkgpaths) {
   pkgpaths [$2] = $3
   print "  started:", $3, "on", $1

   next
}

$3 == "status:" {
   status [$2] = $4
   next
}

{
   log_dir = report1_dir "/" pkgpaths [$2]
   log_fn  = log_dir "/uu.tmp"
}

NF > 2 {
   sub(/^[^ ]+ [^ ]+ /, "")
   print > log_fn
   next
}

# end of task
{
   xclose(log_fn)
}

function xsystem (prog){
   if (system(prog)){
      print "system() failed" > "/dev/stderr"
      exit 1
   }
}

function xclose (fn){
   if (close(fn)){
      print "close(\"" fn "\") failed" > "/dev/stderr"
      exit 1
   }
}

function xgetline0 (fn,                 ret){
   ret = (getline < fn)
   if (ret < 0){
      print "The function getline failed" > "/dev/stderr"
      exit 1
   }
   return (ret > 0)
}

status [$2] == 0 {
   # succeeded
   pkgpath = pkgpaths [$2]

   print "    succeeded:", pkgpath

   #
   print pkgpath >> packages_built_fn
   xclose(packages_built_fn)

   # getting lock
   xsystem(wait_for_lock)

   # reading counts
   delete counts
   while (xgetline0(queue_fn)){
      counts [$1] = $2
   }
   xclose(queue_fn)

   # updating counts
   for (i in counts){
      if ((pkgpath SUBSEP i) in deps){
         --counts [i]
      }
   }

   # writing counts
   printf "" > tmp_fn
   for (i in counts){
      print i, counts [i] > tmp_fn
   }
   xclose(tmp_fn)

   # renaming
   xsystem("mv " tmp_fn " " queue_fn)

   # removing lock
   xsystem(rm_lock)

   # removing log directory
   xsystem("rm -rf " log_dir)

   next
}

function decode_logs (uu,                  txt,fn,dir){
   txt = uu
   sub(/[.][^.\/]*$/, ".txt", txt)

   dir = uu
   sub(/\/[^\/]*$/, "", dir)

   xsystem("uudecode -p < " uu " > " txt)

   #
   fn = ""
   while (xgetline0(txt)){
      if ($1 == "--**--**--" && $3 == "--**--**--"){
         if (fn){
            xclose(fn) # in order to not exceed system/awk limits...
         }

         fn = dir "/stage_" $2 ".txt"
         printf "  " > fn
         continue
      }

      if (fn){
         print > fn
      }else{
         print "this should not happen!" > "/dev/stderr"
      }
   }

   if (fn){
      close(fn) # in order to not exceed system/awk limits...
   }

   xsystem("rm " uu " " txt)
}

{
   # fialed
   pkgpath = pkgpaths [$2]

   print "    FAILED:", pkgpath

   #
   print pkgpath >> packages_failed_fn
   xclose(packages_failed_fn)

   # getting lock
   xsystem(wait_for_lock)

   # decoding logs
   decode_logs(log_fn)

   # reading counts
   delete counts
   while (xgetline0(queue_fn)){
      counts [$1] = $2
   }
   xclose(queue_fn)

   # indirectly failed
   delete indirect_failures
   log_fn  = log_dir "/broken_packages.txt"
   indirect_broken_found = 0
   printf "" >> log_fn
   for (pkgp in all_pkgpaths){
      if ((pkgpath SUBSEP pkgp) in deps){
         indirect_broken_found = 1

         indirect_failures [pkgp] = 1

         pkgp_log_dir = report1_dir "/" pkgp
         pkgp_log_fn  = pkgp_log_dir "/failed_because.txt"
         print pkgpath >> pkgp_log_fn
         xclose(pkgp_log_fn) # in order to not exceed system/awk limits...

         print pkgp > log_fn
      }
   }
   if (indirect_broken_found)
      xclose(log_fn) # in order to not exceed system/awk limits...

   # writing new queue
   printf "" > tmp_fn
   for (i in counts){
      if (! (i in indirect_failures)){
         print i, counts [i] > tmp_fn
      }
   }
   xclose(tmp_fn)

   # renaming
   xsystem("mv " tmp_fn " " queue_fn)

   # removing lock
   xsystem(rm_lock)

   next
}
'
}

if test "$MASTER_MODE"; then
    SLAVES="-n $SLAVES"
    TRANSPORT="-t $TRANSPORT"
else
    SLAVES='-n +1' # building on localhost
    unset TRANSPORT
fi

verbose_print "Building\n"
runpipe0 \
    print_tasks '|' \
    paexec -EI -lr $TRANSPORT $SLAVES -c "$DISTBB_SLAVE" '|' \
    postfilter

######################################################################

verbose_print "Updating pkg_summary.{txt,gz,bz2}..."
pkg_update_summary $pkg_summary $PACKAGES/All
gzip < $pkg_summary > ${pkg_summary%%.txt}.gz
bzip2 < $pkg_summary > ${pkg_summary%%.txt}.bz2
verbose_print "done\n"

######################################################################

distbb_gen_report "$BUILD_START"

######################################################################

distbb_upload_logs "$BUILD_START"

######################################################################

distbb_upload_pkgs "$BUILD_START"

######################################################################

distbb_report "$BUILD_START"

######################################################################
