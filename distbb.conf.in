#-*-mode:  sh -*-

# 
PKGSRC_PREFIX="/usr/pkg"

# pkgsrc friendly make
BMAKE=/usr/bin/make       # for NetBSD
#BMAKE=$PKGSRC_PREFIX/bin/bmake # for other OS

# pkgsrc prefix
PKGSRCDIR=/usr/pkgsrc

# directories to be deleted before installing bootstrap
# and building a package
RMDIRS_CMD="/bin/rm -rf $PKGSRC_PREFIX /var/db/pkg"
#RMDIRS_CMD="/bin/rm -rf $PKGSRC_PREFIX" # PKGDB is under PREFIX

# bootstrap
BOOTSTRAP="/path/to/bootstrap.tar.gz"
#BOOTSTRAP=''

# a programs that outputs ALL packages to be built,
# by default all pkgsrc packages are output
LIST_ALL_PKGS_CMD='@@bindir@@/pkg_list_all_pkgs'
#LIST_ALL_PKGS_CMD='/path/to/list_all_pkgsrc_packages_and_my_extra_wip_packages'

#
EXTRACT_BOOTSTRAP_CMD="/bin/tar -xzf $BOOTSTRAP -C /"

# set it to non-empty string if you want "distributed" bulk build
# also see SLAVES variable
MASTER_MODE='yes'
#MASTER_MODE='' # for single-host building

# hosts|chroots where actual builds are done
SLAVES='root@host1 root@host2 root@host3'
#SLAVES='pkgsrc@host1 pkgsrc@host2 pkgsrc@host3'
#SLAVES='chroot1 chroot2 chroot3'

# transport to the slaves
TRANSPORT='/usr/bin/ssh -x'
#TRANSPORT='/usr/bin/rsh'
#TRANSPORT="@@libexecdir@@/transport_chroot" # not implemented yet

# directory for binary packages
PACKAGES="$PKGSRCDIR/packages"

# pkg_summary(5)
PKG_SUMMARY="$PACKAGES/All/pkg_summary.txt"
PKG_UPDATE_SUMMARY_CMD='@@bindir@@/pkg_update_summary'
#PKG_UPDATE_SUMMARY_CMD='@@bindir@@/pkg_update_summary -r'

# pkg_src_summary (similar to pkg_summary(5) but for source packages)
PKG_SRC_SUMMARY="$PKGSRCDIR/pkg_src_summary.txt"

# PKG_UPDATE_SRC_SUMMARY_CMD - receives a list of requested packages
#                              from stdin
#
# If you want to build short version of src_summary, uncomment the following
# (see pkg_src_summary(1))
#export PSS_FIELDS='PKGNAME PKGPATH DEPENDS BUILD_DEPENDS MAINTAINER NO_BIN_ON_FTP NO_BIN_ON_CDROM'
#
# For generating an "expanded" PLIST.
# It is useless for distbb but looks very nice ;-)
#export PSS_OPTIONS='-p'
# (see pkg_src_summary(1))
#
# The following variant for PKG_UPDATE_SRC_SUMMARY_CMD
# updates pkg_src_summary efficiently, but ALL packages in pkgsrc tree
# will be included to pkg_src_summary
# (pkg_update_src_summary ignores its stdin).
# If pkg_update_src_summary is used and both PSS_SLAVES and
# PSS_TRANSPORT are set, make sure that master host's /usr/pkgsrc is the same
# as slave hosts' ones.
#PKG_UPDATE_SRC_SUMMARY_CMD="@@bindir@@/pkg_update_src_summary '$PKG_SRC_SUMMARY'"

# If your machine is very fast, you can use program 'pkg_src_summary'
# to build src_summary. See below for PSS_* variables
# to make summary using several processes or remote machines.
# Unlike previous variant with pkg_update_src_summary, summary
# for only requested packages will be included to pkg_src_summary.
# If you build only a few packages using 'distbb -f' this variant is prefered.
# -m option is for building multi-variant packages, see pkg_src_summary(1)
PKG_UPDATE_SRC_SUMMARY_CMD="@@bindir@@/pkg_src_summary -A -m > '$PKG_SRC_SUMMARY'"

# if you want to build src_summary using several processes or several
# machines in a network, set PSS_SLAVES.
# (see pkg_src_summary(1))
# NOTE: pkg_src_summary is called
#    by both pkg_src_summary and pkg_update_src_summary
# NOTE: PSS_* variables MUST be exported.
#

# 6 parallel local processes (for 4-CPU SMP machine)
# Note that if you set PSS_SLAVES=+NUM, pkg_src_summary will be generated
# on master host. This may be dangerous
# (master host != slave host ===> different pkg_src_summaries)
# and is therefore is not recomented. It is recomended to always
# generate pkg_src_summary on slave hosts.
#export PSS_SLAVES=+6
#export PSS_SLAVES='' # dangerous for the same reason

# Gnerating pkg_src_summary on slave hosts (recomended)
#export PSS_SLAVES="$SLAVES $SLAVES" # 2 processes per slave machine

export PSS_SLAVES="$SLAVES" # reasonable default

#export PSS_TRANSPORT='' # (for SMP machine)
#export PSS_TRANSPORT='/usr/bin/ssh -x'
#export PSS_TRANSPORT='/usr/bin/rsh'
#export PSS_TRANSPORT="@@libexecdir@@/transport_chroot" # not implemented yet
export PSS_TRANSPORT="$TRANSPORT" # reasonable default

#export PSS_PPERS=20 # to process N packages per slave at once

# directory where reports are saved
REPORTS_DIR=$HOME/bulk-logs

# binary package extension
PKG_SUFX=.tgz
#PKG_SUFX=.tbz

# install the following packages first.
# These packages are listed as a result of
# 'bmake show-var VARNAME=BOOTSTRAP_DEPENDS'
EXTRA_DEPS='pkgtools/digest sysutils/checkperms'
# The following command will be called for each package in EXTRA_DEPS
# to generate their dependancies, for example,
# sysutils/checkperms depends on pkgtools/digest
EXTRA_DEPS_CMD="$BMAKE show-var VARNAME=BOOTSTRAP_DEPENDS"
#EXTRA_DEPS_CMD=: # who knows

# for target 'depends'
DEPENDS_TARGET='do-bin-install'

# Target for clean-ups after package building.
# If you want to keep working directories, set this variable to dbb_none
CLEAN_TARGET='clean'
#CLEAN_TARGET='dbb_none'

# the following targets will be run in order.
# The target "dbb_init" is special. It makes the following:
#    remove /usr/pkg directory (see RMDIRS_CMD)
#    unpack bootstrap (see EXTRACT_BOOTSTRAP_CMD)
# dbb_canbebuilt target checks PKG_FAIL_REASON...
#    It is recommended to include it to TARGETS,
#    otherwise counters in "Failures per maintainer" will
#    be not fully correct
TARGETS='dbb_init clean dbb_canbebuilt depends fetch checksum extract patch configure build install package deinstall'
# the following is for USE_DESTDIR=yes|full
#TARGETS='dbb_init clean dbb_canbebuilt depends fetch checksum extract patch configure build package bin-install deinstall'

# extra options passed to bmake
# BATCH is mandatory for bulk builds!
EXTRA_OPTS='BATCH=yes PKG_VERBOSE=1 CREATE_WRKDIR_SYMLINK=no'
# the following is for USE_DESTDIR=full bulk builds
#EXTRA_OPTS='BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=full CHECK_SHLIBS=no'

# do not change the following unless you know what you are doing
DISTBB_SLAVE=@@libexecdir@@/slave

# filename containing notes about bulk build (in html format, of
# course in utf-8 charset), e.g. unusual build options, compiler etc.
NOTES=''

# some packages fail to build because they are a part of pkgsrc
# bootstrap.  if you want to build them try to uncomment lines in
# SPECIAL_PACKAGES variables
#
# you may also want to use different building options
# to build some packages, e.g. to use gcc-3.4 for building audio/festival,
# (Under Linux Debian/etch and DragonFlyBSD gcc-3.4 is a part
# of "base" system), see below.
# NOTE: There are no quotes around string containing spaces
#       (this is not shell ;-) )
# NOTE: An empty string after EACH package section is mandatory
# NOTE: Do not forget that you can define your own Makefile targets
#       in distbb.local.mk. this new target can run, for example,
#       pkg_add -u

SPECIAL_PACKAGES="\
#PKGPATH=pkgtools/digest
#TARGETS=dbb_init clean dbb_canbebuilt depends fetch checksum extract patch configure build package replace
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=full CHECK_SHLIBS=no
#
#PKGPATH=pkgtools/bootstrap-mk-files
#TARGETS=dbb_init clean dbb_canbebuilt depends fetch checksum extract patch configure build package replace
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=full CHECK_SHLIBS=no
#
#PKGPATH=net/tnftp
#TARGETS=dbb_init clean dbb_canbebuilt depends fetch checksum extract patch configure build package replace
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=full CHECK_SHLIBS=no
#
#PKGPATH=sysutils/checkperms
#TARGETS=dbb_init clean dbb_canbebuilt depends fetch checksum extract patch configure build package replace
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=full CHECK_SHLIBS=no
#
#PKGPATH=devel/bmake
#TARGETS=dbb_init clean dbb_canbebuilt depends fetch checksum extract patch configure build package replace
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=full CHECK_SHLIBS=no
#
#PKGPATH=pkgtools/pkg_install
#TARGETS=dbb_init clean dbb_canbebuilt depends fetch checksum extract patch configure build package replace
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=full CHECK_SHLIBS=no
#
#PKGPATH=audio/festival # TARGETS is not changed!
#EXTRA_OPTS=CC=/usr/bin/gcc-3.4 CXX=/usr/bin/g++-3.4 BATCH=yes PKG_VERBOSE=1
#
#PKGPATH=emulators/qemu # TARGETS is not changed!
#EXTRA_OPTS=CC=/usr/bin/gcc-3.4 CXX=/usr/bin/g++-3.4 BATCH=yes PKG_VERBOSE=1
#
"

# Person running bulk build (in html format, of course in utf-8 charset).
# If empty string, it is not included to the report.
RESPONSIBLE=''
#RESPONSIBLE='Aleksey Cheusov'
#RESPONSIBLE='Aleksey Cheusov &lt;cheusov@tut.by&gt;'
#RESPONSIBLE='<a href="mailto:cheusov@tut.by">Aleksey Cheusov</a>'

# a number of "top offenders"
OFFENDERS_CNT=20

# a number of failed dependancies that are included to the report
MAX_FAILED_DEPS_CNT=6

# some broken packages need an interaction with user even if BATCH variable
# is set to YES. This may "hang" a bulk build. If you don't want this,
# set the following variable to "1", otherwise leave it unset.
STDIN_FROM_DEV_NULL=1
#STDIN_FROM_DEV_NULL=''

# if STDIN_FROM_DEV_NULL=1, some packages may produce infinite garbage to
# stdout and in turn may waste ALL your free disk space. To prevent this,
# set the following limit. 
LOG_SIZE_LIMIT=50000000 # ~50Mb seems good enough
#LOG_SIZE_LIMIT=0 # no limit! Are you sure?

#
OS="$(uname -s)"

#
OSVER="$(uname -r)/$(uname -m)"

#
PKGSRCVER='2008Q1'
#PKGSRCVER='current'

#
PACKAGES_URL="http://mova.org/~cheusov/pub/pkgsrc-distbb/$OS/$PKGSRCVER/packages/"

#
REPORT_URL="http://www.mova.org/~cheusov/pub/pkgsrc-distbb/$OS/$PKGSRCVER/log/$BUILD_ID/META/report.html"

#
REPORT_CMD="/usr/bin/mail -s \"pkgsrc-$PKGSRCVER $OS $OSVER bulk build results $BUILD_ID\" cheusov@tut.by"

#
UPLOAD_PKGS_CMD="@@bindir@@/rsync -av --delete-excluded -e ssh $PACKAGES/ cheusov@mova.org:~/public_html/pub/pkgsrc-distbb/$OS/$PKGSRCVER/packages/"

#
UPLOAD_LOGS_CMD="@@bindir@@/rsync -av --delete-excluded --exclude '*.tmp' -e ssh $REPORTS_DIR/$BUILD_ID cheusov@mova.org:~/public_html/pub/pkgsrc-distbb/$OS/$PKGSRCVER/log/"

############################################################
# You MUST copy the following to your distbb.conf
I_AM_READY=2
