#!/bin/sh

# Copyright (c) 2008-2012 Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# See LICENSE file

######################################################################

set -e
set -o pipefail

export LC_ALL=C

# usage: stage_init BUILD_ID
test $# -eq 1

# init
BUILD_ID="$1"
test -n "$build_start" # MUST be set in environment

packages="$pkgs_fn" # pkgs_fn - from distbb

: ${DISTBB_CONF:=@sysconfdir@/distbb.conf}
. "$DISTBB_CONF"
. @libexecdir@/common

mkdir -p "$MSCOMMONDIR"

if touch "$MSCOMMONDIR/check"; then
    rm "$MSCOMMONDIR/check"
else
    cat <<EOF
$MSCOMMONDIR directory is not writable or doesn't exist.
EOF
    exit 1
fi

test -n "$BUILD_ID" -a -n "$BULK_LOGS_DIR" # who knows...
rm -rf "$REPORT1_DIR"
mkdir -p -m 700 "$tmpdir"
cp "$ICON_FILE" "$REPORT1_DIR/distbb.ico"
cp "$CSS_FILE" "$REPORT1_DIR/distbb.css"

echo "$build_start" > "$build_start_fn"

tmp_stderr_fn="$tmpdir/tmp_stderr.tmp"
pkgsrc_deps_fn="$tmpdir/pkgsrc_deps.tmp";
raw_packages_fn="$tmpdir/raw_packages.tmp"
packages_PAeNA_fn="$tmpdir/packages_PAeNA.tmp"
packages_PA_fn="$tmpdir/packages_PA.tmp"
updated_packages_fn="$tmpdir/updated_packages.tmp"

indent2 (){
    awk '{print "  " $0}' "$@"
}

summary2PAeNA (){
    awk '
/^PKGPATH=/ { pkgpath = substr($0,9)}
/^PKGNAME=/ { pkgname = substr($0,9)}
/^ASSIGNMENTS=/ { assign = substr($0,13)}
NF == 0 {
   if (assign)
      pkgpath=pkgpath ":" assign
   print pkgpath ";" pkgname
   pkgpath = pkgname = assign = ""
}
' "$@"
}

# main
verbose_print "Preparations\n"

printf '' > "$packages_failed_notavail_fn.tmp"
printf '' > "$packages_failed_scan_fn"
printf '' > "$packages_failed_deps_fn"
printf '' > "$packages_failed_fn.tmp"
printf '' > "$packages_built_prev_fn"

printf '' > "$progress_fn"

######################################################################
### unpacking bootstrap
verbose_print "  removing PREFIX and unpacking bootstrap..."
if is_true "$PARALLEL_MODE"; then
    for s in $SLAVES; do
	eval "$TRANSPORT '$s' 'env DISTBB_CONF=$DISTBB_CONF @libexecdir@/wrapper $RMDIRS_CMD'"
	eval "$TRANSPORT '$s' 'env DISTBB_CONF=$DISTBB_CONF @libexecdir@/wrapper $EXTRACT_BOOTSTRAP_CMD'"
    done
else
    eval @libexecdir@/wrapper $RMDIRS_CMD
    eval @libexecdir@/wrapper $EXTRACT_BOOTSTRAP_CMD
fi
verbose_print '\n'

######################################################################
### initial packages
verbose_print "  initial packages..."

cleanup_package_list (){
    awk '
    {
       sub(/#.*$/, "")
    }
    NF > 0 {
       print $1
    }' "$packages"
}

if test "$packages"; then
    # remove comments and empty lines
    cleanup_package_list > "$raw_packages_fn"
else
    if is_true "$PARALLEL_MODE" -a -n "$TRANSPORT" -a -n "$SLAVES"; then
	slave1="$(echo $SLAVES | sed 's, .*$,,')"
	eval "$TRANSPORT '$slave1' 'env DISTBB_CONF=$DISTBB_CONF @libexecdir@/wrapper $LIST_ALL_PKGS_CMD'"
    else
	eval "@libexecdir@/wrapper $LIST_ALL_PKGS_CMD"
    fi > "$raw_packages_fn"
fi

# add extra packages to the list of packages requested by user
for p in $EXTRA_DEPS; do
    echo $p >> "$raw_packages_fn"
done

sort_uniq_inplace "$raw_packages_fn"

verbose_print '\n'

######################################################################
### updating PKG_ALL_SUMMARY

if test -z "$skip_updating_summary"; then
    verbose_print "  updating pkg_all_summary..."
    eval @libexecdir@/wrapper $PKG_UPDATE_ALL_SUMMARY_CMD \
	"$PKG_ALL_SUMMARY" "$PACKAGES/All"
    verbose_print '\n'
fi

######################################################################
### updating PKG_SRC_SUMMARY

printf '' >> "$build_src_summary_log_fn"

if test -n "$LD_PRELOAD"; then
    export PSS_ENVIRON="$PSS_ENVIRON LD_PRELOAD=$LD_PRELOAD"
fi
if test -n "$LIBKVER_OSRELEASE"; then
    export PSS_ENVIRON="$PSS_ENVIRON LIBKVER_OSRELEASE=$LIBKVER_OSRELEASE"
fi

if test -z "$skip_updating_src_summary"; then
    if ! is_true "$PARALLEL_MODE"; then
	unset PSS_SLAVES || true
    fi

    # target host
    verbose_print "  updating pkg_src_summary..."
    set +e # workaround for buggy Korn Shell
	   # ('set -e' + if + eval + false)
    if ! eval "@libexecdir@/wrapper $PKG_UPDATE_SRC_SUMMARY_CMD \
	    < $raw_packages_fn 2>> $build_src_summary_log_fn"
    then
	cat "$build_src_summary_log_fn" 1>&2
	exit 1
    fi
    set -e
    verbose_print '\n'
fi

pkg_assignments2pkgpath "$PKG_SRC_SUMMARY" | tee "$pkg_src_summary_fn" |
    pkg_enrich_summary -bt > "$processed_pkg_src_summary_fn.tmp"
pkg_summary2bb_pkgs "$processed_pkg_src_summary_fn.tmp" > "$processed_pkg_src_summary_fn"

######################################################################
### packages for which pkg_src_summary failed.
verbose_print "  is there packages for which pkg_src_summary failed?..."

pkg_grep_summary -f PKGPATH,PKGNAME,ASSIGNMENTS -t strfile PKGPATH \
    "$raw_packages_fn" < "$processed_pkg_src_summary_fn" | summary2PAeNA \
    > "$packages_PAeNA_fn"
pkg_grep_summary -f PKGPATH,PKGNAME,ASSIGNMENTS -t strfile PKGPATHe \
    "$raw_packages_fn" < "$processed_pkg_src_summary_fn" | summary2PAeNA \
    >> "$packages_PAeNA_fn"
sort_uniq_inplace "$packages_PAeNA_fn"

PAeNA2PA "$packages_PAeNA_fn" | sort -u > "$packages_PA_fn"
comm -23 "$raw_packages_fn" "$packages_PA_fn" > "$packages_failed_scan_fn"

verbose_print '\n'

######################################################################
### comparison binaries against pkgsrc tree
verbose_print "  pkg_src_summary vs. pkg_summary comparison..."

printf '' > "$errors_fn"

eval @libexecdir@/wrapper \
    $PKG_CMP_SUMMARY_CMD "$processed_pkg_src_summary_fn" "$PKG_ALL_SUMMARY" \
    > "$summary_cmp_fn" || true

grep '^<' "$summary_cmp_fn" > "$tmp_stderr_fn" || true
if test -s "$tmp_stderr_fn"; then
    cat >> "$errors_fn" <<'EOF'
------------------
Versions of some packages go backward
EOF
    indent2 "$tmp_stderr_fn" >> "$errors_fn"
fi

verbose_print '\n'

######################################################################
### dependency graph of packages to build
verbose_print "  dependency graph of packages to build..."

pkg_summary2deps -Aspnrl2 "$processed_pkg_src_summary_fn" \
    > "$pkgsrc_deps_fn" 2>"$tmp_stderr_fn"
if test -s "$tmp_stderr_fn"; then
    cat >> "$errors_fn" <<'EOF'
------------------
pkg_summary2deps:
EOF
    indent2 "$tmp_stderr_fn" >> "$errors_fn"
fi

awk '
$1  == ">" || $1  == "<" {
   p[$2 ";" $4 "-" $5] = 1
}
$1  == "-" {
   p[$2 ";" $3 "-" $4] = 1
}
$1  == "=" {
   d[$2 ";" $4 "-" $5] = 1
}
END {
   for (n in p) if (! (n in d))
      print n
}
' "$summary_cmp_fn" > "$updated_packages_fn"

pkg_subgraph_deps -f "$updated_packages_fn" \
    "$pkgsrc_deps_fn" |
    PAeNA2PAe > "$rebuild_PAe_fn"

pkg_subgraph_deps -v -f "$updated_packages_fn" \
    "$pkgsrc_deps_fn" |
    PAeNA2PAe |
    awk '
	NF == 1 { h[$1] = 1 }
	NF == 2 { h[$2] = 1 }
	NF == 3 { h[$2] = h[$3] = 1 }
	END { for (p in h) print p }' > "$packages_built_prev_fn.tmp"

verbose_print '\n'

######################################################################
### list of already built packages

verbose_print "  copying auxiliary files..."

PAeNA2NA "$pkgsrc_deps_fn" > "$aux_reqd_deps_fn"

verbose_print '\n'

######################################################################
