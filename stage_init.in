#!/bin/sh

# Copyright (c) 2008-2011 Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# See LICENSE file

######################################################################

set -e
. @bindir@/pipestatus

export LC_ALL=C

# usage: stage_init BUILD_ID
test $# -eq 1

# init
BUILD_ID="$1"
test -n "$build_start" # MUST be set in environment

packages="$pkgs_fn" # pkgs_fn - from distbb

DISTBB_CONF=${DISTBB_CONF:-@sysconfdir@/distbb.conf}
. "$DISTBB_CONF"
. @libexecdir@/common

mkdir -p "$MSCOMMONDIR"

if touch "$MSCOMMONDIR/check"; then
    rm "$MSCOMMONDIR/check"
else
    cat <<EOF
$MSCOMMONDIR directory is not writable or doesn't exist.
EOF
    exit 1
fi

test -n "$BUILD_ID" -a -n "$REPORTS_DIR" # who knows...
rm -rf $REPORT1_DIR
mkdir -p -m 700 $tmpdir
cp "$ICON_FILE" "$REPORT1_DIR/distbb.ico"
cp "$CSS_FILE" "$REPORT1_DIR/distbb.css"

echo "$build_start" > $build_start_fn

summary2PKGPATH (){
    sed -n 's/^PKGPATH=//p' "$@"
}

# main
verbose_print "Preparations\n"

printf '' > $packages_failed_notavail_fn.tmp
printf '' > $packages_failed_scan_fn
printf '' > $packages_failed_deps_fn
printf '' > $packages_failed_fn.tmp
printf '' > $packages_built_prev_fn

printf '' > $progress_fn

######################################################################
### unpacking bootstrap
verbose_print "  removing PREFIX and unpacking bootstrap..."
if test -n "$MASTER_MODE"; then
    for s in $SLAVES; do
	eval $TRANSPORT "$s" @libexecdir@/wrapper $RMDIRS_CMD
	eval $TRANSPORT "$s" @libexecdir@/wrapper $EXTRACT_BOOTSTRAP_CMD
    done
else
    eval @libexecdir@/wrapper $RMDIRS_CMD
    eval @libexecdir@/wrapper $EXTRACT_BOOTSTRAP_CMD
fi
verbose_print "done\n"

######################################################################
### initial packages
verbose_print "  initial packages..."

cleanup_package_list (){
    awk '
    {
       sub(/#.*$/, "")
    }
    NF > 0 {
       print $1
    }' "$packages"
}

raw_packages_fn="$tmpdir/raw_packages.tmp"
if test "$packages"; then
    # remove comments and empty lines
    cleanup_package_list > "$raw_packages_fn"
else
    if test -n "$MASTER_MODE" -a -n "$TRANSPORT" -a -n "$SLAVES"; then
	slave1="$(echo $SLAVES | sed 's, .*$,,')"
	environ="BMAKE=$BMAKE PKGSRCDIR=$PKGSRCDIR CKSUM=$CKSUM"
	eval $TRANSPORT $slave1 "env $environ @libexecdir@/wrapper $LIST_ALL_PKGS_CMD" > "$raw_packages_fn"
    else
	eval @libexecdir@/wrapper $LIST_ALL_PKGS_CMD > "$raw_packages_fn"
    fi
fi

# add extra packages to the list of packages requested by user
for p in $EXTRA_DEPS; do
    echo $p >> "$raw_packages_fn"
done

sort_uniq_inplace "$raw_packages_fn"

verbose_print "done\n"

######################################################################
### updating PKG_ALL_SUMMARY

if test -z "$skip_updating_summary"; then
    verbose_print "  updating pkg_all_summary..."
    eval @libexecdir@/wrapper $PKG_UPDATE_ALL_SUMMARY_CMD "$PKG_ALL_SUMMARY" "$PACKAGES/All"
    verbose_print "done\n"
fi

######################################################################
### updating PKG_SRC_SUMMARY

printf '' >> "$build_src_summary_log_fn"

if test -z "$skip_updating_src_summary"; then
    if test -z "$MASTER_MODE"; then
	unset PSS_SLAVES || true
    fi

    verbose_print "  updating pkg_src_summary..."
    set +e # workaround for buggy Korn Shell
           # ('set -e' + if + eval + false)
    if ! eval "@libexecdir@/wrapper $PKG_UPDATE_SRC_SUMMARY_CMD \
	< $raw_packages_fn 2> $build_src_summary_log_fn"
    then
	cat "$build_src_summary_log_fn" 1>&2
	exit 1
    fi
    set -e
    verbose_print "done\n"
fi

pkg_assignments2pkgpath "$PKG_SRC_SUMMARY" > "$pkg_src_summary_fn.tmp"
pkg_summary2bb_pkgs "$pkg_src_summary_fn.tmp" > "$pkg_src_summary_fn"
rm "$pkg_src_summary_fn.tmp"
#pkg_summary2bb_pkgs "$PKG_SRC_SUMMARY" > "$pkg_src_summary_fn.tmp"
#pkg_assignments2pkgpath "$pkg_src_summary_fn.tmp" > "$pkg_src_summary_fn"
#rm "$pkg_src_summary_fn.tmp"

######################################################################
### packages for which pkg_src_summary failed.
verbose_print "  is there packages for which pkg_src_summary failed?..."

pkg_grep_summary -f PKGPATH -t strfile PKGPATH  "$raw_packages_fn" \
    < "$pkg_src_summary_fn" | summary2PKGPATH > "$packages_fn"
pkg_grep_summary -f PKGPATH -t strfile PKGPATHe "$raw_packages_fn" \
    < "$pkg_src_summary_fn" | summary2PKGPATH >> "$packages_fn"
sort_uniq_inplace "$packages_fn"

cut -f1 -d: "$packages_fn" | sort -u > "$packages_fn".PA
comm -23 "$raw_packages_fn" "$packages_fn".PA > "$packages_failed_scan_fn"

verbose_print "done\n"

######################################################################
### dependency graph of packages to rebuild
verbose_print "  dependency graph of packages to rebuild..."

awk '
/^PKGNAME/ {pkgbase = substr($0, 9); sub(/-[^-]*$/, "", pkgbase)}
/^PKGPATH/ {pkgpath = substr($0, 9); sub(/:.*$/, "", pkgpath)}
NF == 0 {print pkgpath "," pkgbase}
' "$pkg_src_summary_fn" > "$tmpdir/src_PABA.tmp"

summary2PKGPATH "$pkg_src_summary_fn" |
sort -u > "$tmpdir/all_src_pkgpaths"

all_deps_PAeNA_fn=$tmpdir/all_deps_PAeNA.tmp
pkg_summary2deps -Apnrsal -P $tmpdir/all_src_pkgpaths \
    "$pkg_src_summary_fn" "$PKG_ALL_SUMMARY" \
    > "$all_deps_PAeNA_fn" 2>/dev/null

@libexecdir@/pkg_summary2build_deps \
    -s "$pkg_src_summary_fn" \
    -b "$PKG_ALL_SUMMARY" \
    -r "$tmpdir/updated_PAeNA.tmp" \
    -m ${deps_graph_mode} \
    "$all_deps_PAeNA_fn" > "$tmpdir/reqd_deps_PAeNA.tmp"

PAeNA2NA ()  { sed 's/[^ ]*;//g' "$@"; }
PAeNA2PAe () { sed 's/;[^ ]*//g' "$@"; } 

PAeNA2NA  "$tmpdir/reqd_deps_PAeNA.tmp" > "$reqd_deps_NA_fn"

rebuild_PAe_pre_fn=$tmpdir/rebuild_PAe_pre.tmp

pkg_subgraph_deps -f "$tmpdir/updated_PAeNA.tmp" \
    "$tmpdir/reqd_deps_PAeNA.tmp" |
PAeNA2PAe > "$rebuild_PAe_pre_fn"

if test "$packages"; then
    pkg_subgraph_deps -r -f "$packages_fn" \
	"$rebuild_PAe_pre_fn" > "$rebuild_PAe_fn"
else
    ln -s "$rebuild_PAe_pre_fn" "$rebuild_PAe_fn"
fi

printf '' > "$errors_fn"
printf '' > "$summary_cmp_fn"

# rebuilt previously
changed_pkgs_fn=$tmpdir/changed.tmp
awk 'NF == 2 {print $1 "\n" $2; next} {print}' "$rebuild_PAe_fn" |
sort -u > "$changed_pkgs_fn"

sort "$changed_pkgs_fn" "$changed_pkgs_fn" "$tmpdir/all_src_pkgpaths" |
uniq -c |
awk '$1 == 1 {print $2}' > "$packages_built_prev_fn.tmp"

verbose_print "done\n"

######################################################################
### comparison binaries against pkgsrc tree
verbose_print "  pkg_src_summary vs. pkg_summary comparison..."

eval @libexecdir@/wrapper \
    $PKG_CMP_SUMMARY_CMD "$pkg_src_summary_fn" "$PKG_ALL_SUMMARY" \
    > "$summary_cmp_fn" || true

if grep '^<' "$summary_cmp_fn" > /dev/null; then
    cat >> "$errors_fn" <<'EOF'
 ------------------
Versions of some packages go backward

EOF
    grep '^<' $summary_cmp_fn >> "$errors_fn"
fi

verbose_print "done\n"

######################################################################
### list of already built packages

verbose_print "  copying auxiliary files..."

cp "$reqd_deps_NA_fn" "$aux_reqd_deps_fn"

verbose_print "done\n"

######################################################################

