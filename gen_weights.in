#!/usr/bin/env runawk

# Copyright (c) 2008-2011 Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# See LICENSE file

######################################################################

#use "power_getopt.awk"
#use "xgetline.awk"
#use "xclose.awk"
#use "has_prefix.awk"

# This is a heuristics for building heavy packages and packages having
# a lot of dependencies before others in order to minimize total bulk
# build time in parallel mode.

#.begin-str help
# gen_weights - takes a dependency graph of packages and pkg_src_summary
# on input and outputs weights of packages in paexec(1) format, i.e.
#    weight: <pkgname1> <weight1>
#    weight: <pkgname2> <weight2>
#    ...
#
# usage: gen_weights [OPTIONS] [pkg_src_summaries...]
# OPTIONS:
#    -h|--help          display this screen
#    =f <file>          dep_graph filename
#.end-str

BEGIN {
	PENALTY_FOR_DEPENDENCY = 30
	SIZE_MULTIPLIER = 1/10240
	CXX_MULTIPLIER = 10
}

BEGIN {
	fn = getarg("f")
	assert(fn != "") # this option is mandatory

	while(xgetline0(fn)){
		if (NF >= 1)
			pkg [$1] = 0
		if (NF == 2) {
			pkg [$2] = 0
			deps [$1] = deps [$1] " " $2
			incount[$1] += 0
			incount[$2] += 1
		}
	}

	xclose(fn)
	mult = SIZE_MULTIPLIER
}

NF == 0 {
	if (pkgpath in pkg){
		$0 = alldistfiles
		sum_sz = 0
		for (i=1; i <= NF; ++i){
			idx = index($i, ":")
			sum_sz += substr($i, idx+1)
		}
		weight[pkgpath] = int(sum_sz * mult + 5)
	}
	mult = 1
	pkgpath = alldistfiles = ""
	next
}

has_prefix($0, "PKGPATH=") {
	pkgpath = substr($0, 9)
	next
}

has_prefix($0, "ALLDISTFILES=") {
	alldistfiles = substr($0, 14)
	next
}

has_prefix($0, "USE_LANGUAGES=") {
	if ($0 ~ /[Cc][+][+]/)
		mult *= CXX_MULTIPLIER

	next
}

END {
	# topological sort and sum weights for all dependent packages' weight and some penalty
	tail = head = 1
	for (pkgpath in incount) {
		if (!incount[pkgpath])
			queue[tail++] = pkgpath
	}
	for (; head < tail; ++head) {
		pkgpath = queue[head]
		queue[head]
		split(deps[pkgpath], arr, / /)
		for (idx in arr) {
			dep = arr[idx]
			if (dep == "") continue
			--incount[dep]
			weight[pkgpath] += weight[dep] + PENALTY_FOR_DEPENDENCY
			if (! incount[dep]) {
				queue[tail++] = dep
			}
		}
	}
}

END {
	for (pkgpath in weight) {
		weight[pkgpath] += 0
		print "weight:", pkgpath, weight[pkgpath]
	}
}
