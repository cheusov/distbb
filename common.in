#-*-mode:  sh -*-

# Copyright (c) 2008-2011 Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# See LICENSE file

######################################################################

verbose_print (){
    printf "$1" 1>&2
}

sort_uniq (){
    env LC_ALL=C sort -u "$@"
}

sort_uniq_inplace (){
    sort_uniq "$1" > "$1".tmp
    mv "$1".tmp "$1"
}

get_log_dir (){
    # $1 - pkgpath
    # $2 - pkgname
    short_pkgpath="$(echo $1 | sed -e 's,:.*,,' -e 's,/,_,')"
    echo "${short_pkgpath}_$2"
}

print_binrep_spec_files (){
    echo pkg_summary.bz2
    echo pkg_summary.gz
    echo pkg_summary.txt
    echo SHA512.gz
}

filter_out (){
    # $1 - filename containing lines to filter out
    # $@ - input
    runawk -f xgetline.awk -e '
	BEGIN {
	    while (xgetline0(ARGV [1])) filter_out [$0]=0;
	    ARGV [1] = ""
	}
	!($0 in filter_out)' "$@"
}

export LC_ALL=C # for sort and uniq

######################################################################
if test -z "$BUILD_ID"; then
    echo "BUILD_ID MUST be set" 1>&2
    exit 2
fi
if test -z "$REPORTS_DIR"; then
    echo "REPORTS_DIR MUST be set" 1>&2
    exit 2
fi

if echo "$BUILD_ID" | grep ^/ > /dev/null; then
    REPORT1_DIR=$BUILD_ID
    BUILD_ID=$(basename $BUILD_ID)
else
    REPORT1_DIR=$REPORTS_DIR/$BUILD_ID
fi

meta_dir=$REPORT1_DIR/META
tmpdir=$meta_dir/tmp

packages_failed_notavail_fn=$meta_dir/packages_failed_notavail.txt
packages_failed_scan_fn=$meta_dir/packages_failed_scan.txt
packages_failed_deps_fn=$meta_dir/packages_failed_deps.txt
packages_failed_fn=$meta_dir/packages_failed.txt
packages_failed_total_fn=$meta_dir/packages_failed_total.txt
packages_built_prev_fn=$meta_dir/packages_built_prev.txt
packages_built_total_fn=$meta_dir/packages_built_total.txt
progress_fn=$meta_dir/progress.txt

build_src_summary_log_fn=$meta_dir/build_src_summary_log.txt
build_deps_graph_log_fn=$meta_dir/build_deps_graph_log.txt

pkg_src_summary_fn=$meta_dir/pkg_src_summary.txt
summary_cmp_fn=$meta_dir/summary_cmp.txt

build_start_fn=$meta_dir/build_start.tmp
build_end_fn=$meta_dir/build_end.tmp

queue_fn=$tmpdir/queue.tmp
rebuild_fn=$tmpdir/rebuild.tmp

aux_reqd_deps_fn=$MSCOMMONDIR/reqd_deps.txt

# raw packages or packages requested by user
packages_fn=$tmpdir/packages.tmp
# multi-variant packages, that is raw packages enriched with
# build option, like www/ap2-python:PYTHON_VERSION_REQD=25,PKG_APACHE=apache22
packages_fn=$tmpdir/packages.tmp
reqd_deps_fn=$tmpdir/reqd_deps.tmp

bb_history_fn=$REPORTS_DIR/bulk_builds_history.txt

version=@version@

######################################################################
enrich_pkgpath (){
    fields="$1"
    shift

    awk -v pkg_src_summary="$pkg_src_summary_fn" -v fields="$fields" '
BEGIN {
   fields = ("PKGPATH " fields)
   cnt=split(fields, n2f, / /)
   for (i=1; i <= cnt; ++i){
      f2n [n2f [i]] = i
   }
}
FILENAME != pkg_src_summary {
   for (i=1; i <= cnt; ++i){
      if (i > 1)
         printf " "

      printf "%-25s", value[$1, n2f[i]]
   }
   printf "\n"
   next
}
NF == 0 {
   for (f in v){
      value [v["PKGPATH"], f] = v[f]
   }
   delete v
   next
}
{
   $1 = $1
   fname = $0
   sub(/=.*$/, "", fname)
}
fname in f2n {
   if (fname == "MAINTAINER"){
      fvalue = $1
      sub(/,.*$/, "", fvalue)
   }else{
      fvalue = $0
   }
   sub(/^[^=]*=/, "", fvalue)
   v [fname] = fvalue
   next
}
' "$pkg_src_summary_fn" "$@"
}

######################################################################
unset PKG_PATH || true

export PATH=@bindir@:$PATH
export PSS_POST_PATH=@bindir@
