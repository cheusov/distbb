#-*-mode:  sh -*-

# Copyright (c) 2008-2012 Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
#
# See LICENSE file

######################################################################

is_true (){
    case "$1" in
	true|yes|1)
	    return 0;;
	false|no|0|'')
	    return 1;;
	*)
	    echo "Bad value $1. Bolean value is expected" 1>&2;;
    esac
}

assign (){
    # $1 - varname
    # $2 - value
    set +e # workaround for buggy FreeBSD /bin/sh
    __cmd="test -z \"\$$1\""
    if eval "$__cmd"; then
	eval "$1='$2'"
    fi
    set -e # workaround for buggy FreeBSD /bin/sh
}

# 
: ${PKGSRC_PREFIX:=/usr/pkg}

# pkgsrc friendly make
: ${BMAKE:=/usr/bin/make}           # for NetBSD
#: ${BMAKE:=$PKGSRC_PREFIX/bin/bmake} # for other OSes

# pkgsrc prefix
: ${PKGSRCDIR:=/usr/pkgsrc}

# directories to be deleted before installing bootstrap
# and building a package
: ${RMDIRS_CMD:=/bin/rm -rf $PKGSRC_PREFIX /var/db/pkg}
#: ${RMDIRS_CMD:=/bin/rm -rf $PKGSRC_PREFIX} # PKGDB is under PREFIX

# if you want to make built package file with different permission,
# change UMASK variable
#: ${UMASK:=022}

# bootstrap
#: ${BOOTSTRAP:=/path/to/bootstrap.tar}

# Like distbb.conf but for bmake, it is loaded after package's Makefile
# and before distbb's own distbb.mk
: ${DISTBB_LOCAL_MK:=@sysconfdir@/distbb.local.mk}
#: ${DISTBB_LOCAL_MK:=/dev/null}

# a programs that outputs ALL packages to be built,
# by default all pkgsrc packages are output
: ${LIST_ALL_PKGS_CMD:=@bindir@/pkg_list_all_pkgs}
#: ${LIST_ALL_PKGS_CMD:=/path/to/list_pkgs_with_my_extra_wip_packages}

#
: ${EXTRACT_BOOTSTRAP_CMD:=/bin/tar -xf $BOOTSTRAP -C /}

# Tool for weighing packages, the higher weight of a package, the
# sooner it is built. See gen_weight for usage.
: ${WEIGH_PACKAGES_CMD:=@libexecdir@/gen_weights}

# set it to non-empty string if you want "distributed" bulk build
# also see SLAVES variable
#: ${MASTER_MODE 'yes'
: ${MASTER_MODE:=no} # for building "inplace", i.e. destroying $PREFIX

# transport to the slaves
#: ${TRANSPORT:=/usr/bin/ssh -x}
#: ${TRANSPORT:=/usr/bin/rsh}
: ${TRANSPORT:=@libexecdir@/distbb_chroot /var/chroot/}

# hosts|chroots where actual builds are done
#: ${SLAVES:=root@host1 root@host2 root@host3}
#: ${SLAVES:=pkgsrc@host1 pkgsrc@host2 pkgsrc@host3}
: ${SLAVES:=sandbox1 sandbox2}

# directory for binary packages
: ${PACKAGES:=$PKGSRCDIR/packages}

# directory shared between master and slave hosts where common files
# are stored. This directory have to be writable by user running
# distbb command and readable from slave hosts.
: ${MSCOMMONDIR:=$PACKAGES/.distbb}

# pkg_summary(5)
# PKG_ALL_SUMMARY will keep information about all binary packages
: ${PKG_ALL_SUMMARY:=$PACKAGES/All/pkg_all_summary.txt}
# PKG_SUMMARY will keep information about sucessfully built binary packages
: ${PKG_SUMMARY:=$PACKAGES/All/pkg_summary.txt}
: ${PKG_UPDATE_ALL_SUMMARY_CMD:=@bindir@/pkg_update_summary}
#: ${PKG_UPDATE_ALL_SUMMARY_CMD:=@bindir@/pkg_update_summary -r}

# pkg_src_summary (similar to pkg_summary(5) but for source packages)
: ${PKG_SRC_SUMMARY:=$PACKAGES/All/pkg_src_summary.txt}

# PKG_UPDATE_SRC_SUMMARY_CMD - receives a list of requested packages
#                              from stdin
#
# If you want to build short version of src_summary, uncomment the following
# (see pkg_src_summary(1))
: ${PSS_FIELDS:=PKGNAME PKGPATH DEPENDS TOOL_DEPENDS BUILD_DEPENDS MAINTAINER HOMEPAGE DESCRIPTION NO_BIN_ON_FTP NO_BIN_ON_CDROM USE_LANGUAGES ALLDISTFILES PKG_FAIL_REASON}
#
# For generating an "expanded" PLIST.
# It is useless for distbb but looks very nice ;-)
#: ${PSS_OPTIONS:=-p}
# (see pkg_src_summary(1))
#
# The following variant for PKG_UPDATE_SRC_SUMMARY_CMD
# updates pkg_src_summary efficiently, but ALL packages in pkgsrc tree
# will be included to pkg_src_summary
# (pkg_update_src_summary ignores its stdin).
# If pkg_update_src_summary is used and both PSS_SLAVES and
# PSS_TRANSPORT are set, make sure that master host's /usr/pkgsrc is the same
# as slave hosts' ones.
#: ${PKG_UPDATE_SRC_SUMMARY_CMD:=@bindir@/pkg_update_src_summary \"$PKG_SRC_SUMMARY\"}

# If your machine is very fast, you can use program 'pkg_src_summary'
# to build src_summary. See below for PSS_* variables
# to make summary using several processes or remote machines.
# Unlike previous variant with pkg_update_src_summary, summary
# for only requested packages will be included to pkg_src_summary.
# If you build only a few packages using 'distbb -f' this variant is prefered.
# (-m option is for building multi-variant packages, see pkg_src_summary(1),
# NOTE: -m currently doesn't work when entire pkgsrc tree is built,
# because lots of multi-variant packages have constant PKGBASE )
: ${PKG_UPDATE_SRC_SUMMARY_CMD:=@bindir@/pkg_src_summary -btm -A > \"$PKG_SRC_SUMMARY\"}

# program for comparing pkg_summary(5) for available binaries and
# pkg_src_summary collected from pkgsrc source tree
: ${PKG_CMP_SUMMARY_CMD:=@bindir@/pkg_cmp_summary -p}

# if you want to build src_summary using several processes or several
# machines in a network, set PSS_SLAVES.
# (see pkg_src_summary(1))
# NOTE: pkg_src_summary is called
#    by both pkg_src_summary and pkg_update_src_summary
# NOTE: PSS_* variables MUST be exported.
#

# 6 parallel local processes (for 4-CPU SMP machine)
# Note that if you set PSS_SLAVES=+NUM, pkg_src_summary will be generated
# on master host. This may be dangerous
# (master host != slave host ===> different pkg_src_summaries)
# and is therefore is not recomented. It is recomended to always
# generate pkg_src_summary on slave hosts.
#: ${PSS_SLAVES:=+6}
#: ${PSS_SLAVES:=} # dangerous for the same reason

if test yes = "$MASTER_MODE"; then
    # Gnerating pkg_src_summary on slave hosts (recomended)
    #: ${PSS_SLAVES:=$SLAVES $SLAVES} # 2 processes per slave machine

    : ${PSS_SLAVES:=$SLAVES} # reasonable default

    #: ${PSS_TRANSPORT:=} # (for SMP machine)
    #: ${PSS_TRANSPORT:=/usr/bin/ssh -x}
    #: ${PSS_TRANSPORT:=/usr/bin/rsh}
    #: ${PSS_TRANSPORT:=@libexecdir@/distbb_chroot}
    : ${PSS_TRANSPORT:=$TRANSPORT} # reasonable default
fi

: ${PSS_PPERS:=3} # to process N packages per slave at once

# directory where reports are saved
: ${REPORTS_DIR:=$HOME/bulk-logs}

# binary package extension
: ${PKG_SUFX:=.tgz}
#: ${PKG_SUFX:=.tbz}

# install the following packages first in the specified order.
# NOTE: If you need to build package X first, you MUST specify *ALL*
# its dependencies.
: ${EXTRA_DEPS:=}
#: ${EXTRA_DEPS:=pkgtools/digest sysutils/checkperms pkgtools/pkg_install devel/popt devel/distcc}

# Target for clean-ups after package building.
# If you want to keep working directories, set this variable to None
: ${CLEAN_TARGET:=clean}
#: ${CLEAN_TARGET:=None}

# Packages can be built in unprivileged mode with a help of DESTDIR
# support.  Instead of specifying SU_CMD and givin an ordinary user
# privileges to become root you can login as root on slave hosts and
# then become ordinary user without sudo, fakeroot etc.
# For this, set UNPRIV_USER variable.
if test -n "$UNPRIV_USER"; then
    export UNPRIV_USER
    : ${SU_UNPRIV_CMD:=@libexecdir@/wrapper_unpriv}
    export SU_UNPRIV_CMD
    for t in Available Excluded Vars clean fetch checksum \
	extract patch tools wrapper configure build package test
    do
	assign SU_UNPRIV_CMD_$t "$SU_UNPRIV_CMD"
    done
fi

# the following targets will be run in order.
# The target "Init" is special. It makes the following:
#    remove /usr/pkg directory (see RMDIRS_CMD)
#    unpack bootstrap (see EXTRACT_BOOTSTRAP_CMD)
# The target "Available" checks PKG_FAIL_REASON...
#    It is recommended to include it to TARGETS,
#    otherwise counters in "Failures per maintainer" will
#    be not fully correct
# The "Vars" lists bmake's variables for easier debugging
: ${TARGETS:=Init clean CleanupPkgdb Available Excluded Vars Depends fetch checksum extract patch configure build package}

# extra options passed to bmake
# BATCH is mandatory for bulk builds!
: ${EXTRA_OPTS:=DEPENDS_TARGET=nonexistant BATCH=yes PKG_VERBOSE=1}

# do not change the following unless you know what you are doing
: ${DISTBB_SLAVE:=@libexecdir@/slave}

# filename containing notes about bulk build (in html format, of
# course in utf-8 charset), e.g. unusual build options, compiler etc.
#: ${NOTES:=/path/to/my_notes.txt}

# Some packages fail to build because they are a part of pkgsrc
# bootstrap.  If you want to build them try to uncomment lines in
# SPECIAL_PACKAGES variables
#
# You may also want to use different building options
# to build some packages, e.g. to use gcc-3.4 for building audio/festival
# or emulators/qemu packages
# (Under Linux Debian/Etch and DragonFlyBSD v1.X gcc-3.4 is a part
# of "base" system).
# NOTE: There are no quotes around string containing spaces
#       (this is not shell! ;-) )
# NOTE: An empty string after EACH package section is mandatory
# NOTE: Do not forget that you can define your own Makefile targets
#       in distbb.local.mk. This new target can run, for example, pkg_add -u

#SPECIAL_PACKAGES="\
#PKGPATH=pkgtools/digest
#TARGETS=Init clean Vars Depends fetch checksum extract patch configure build package
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=yes CHECK_SHLIBS=no
#
#PKGPATH=pkgtools/bootstrap-mk-files
#TARGETS=Init clean Vars Depends fetch checksum extract patch configure build package
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=yes CHECK_SHLIBS=no
#
#PKGPATH=net/tnftp
#TARGETS=Init clean Vars Depends fetch checksum extract patch configure build package
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=yes CHECK_SHLIBS=no
#
#PKGPATH=sysutils/checkperms
#TARGETS=Init clean Vars Depends fetch checksum extract patch configure build package
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=yes CHECK_SHLIBS=no
#
#PKGPATH=devel/bmake
#TARGETS=Init clean Vars Depends fetch checksum extract patch configure build package
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=yes CHECK_SHLIBS=no
#
#PKGPATH=pkgtools/pkg_install
#TARGETS=Init clean Vars Depends fetch checksum extract patch configure build package
#EXTRA_OPTS=BATCH=yes PKG_VERBOSE=1 USE_DESTDIR=yes CHECK_SHLIBS=no
#
#PKGPATH=audio/festival # TARGETS is not changed!
#EXTRA_OPTS=CC=/usr/bin/gcc-3.4 CXX=/usr/bin/g++-3.4 BATCH=yes PKG_VERBOSE=1
#
#PKGPATH=emulators/qemu # TARGETS is not changed!
#EXTRA_OPTS=CC=/usr/bin/gcc-3.4 CXX=/usr/bin/g++-3.4 BATCH=yes PKG_VERBOSE=1
#
#PKGPATH=devel/popt # distcc is not available yet, so, we set CC to gcc
#EXTRA_OPTS=CC=/usr/bin/gcc BATCH=yes PKG_VERBOSE=1
#
#PKGPATH=devel/distcc # distcc is not available yet, so, we set CC to gcc
#EXTRA_OPTS=CC=/usr/bin/gcc BATCH=yes PKG_VERBOSE=1
#
#"

# Person running bulk build (in html format, of course in utf-8 charset).
# If empty string, it is not included to the report.
#: ${RESPONSIBLE:=}
#: ${RESPONSIBLE:=Vasya Pupkin}
#: ${RESPONSIBLE:=Vasya Pupkin &lt;pupkin@example.com&gt;}
#: ${RESPONSIBLE:=<a href=\"mailto:pupkin@example.com\">Vasya Pupkin</a>}

# a number of "top offenders"
: ${OFFENDERS_CNT:=20}

# a number of failed dependancies that are included to the report
: ${MAX_FAILED_DEPS_CNT:=6}

# some broken packages need an interaction with user even if BATCH variable
# is set to YES. This may "hang" a bulk build. If you don't want this,
# set the following variable to "1", otherwise leave it unset.
: ${STDIN_FROM_DEV_NULL:=1}
#: ${STDIN_FROM_DEV_NULL:=}

# if STDIN_FROM_DEV_NULL=1, some packages may produce infinite garbage to
# stdout and in turn may waste ALL your free disk space. To prevent this,
# set the following limit. 
: ${LOG_SIZE_LIMIT:=50000000} # ~50Mb seems good enough
#: ${LOG_SIZE_LIMIT:=0} # no limit! Are you sure?

: ${ULIMIT_CMD:=ulimit -t 1800}

#
: ${OPSYS:=$(uname -s)}

#
: ${OS_VERSION:=`uname -r`}
: ${MACHINE_ARCH:=`uname -m`}
: ${OSVER:=$OS_VERSION/$MACHINE_ARCH}

# You have to set PKGSRCVER variable, e.g., 2012Q2
: ${PKGSRCVER:=unknown}
#: ${PKGSRCVER:=current}
#: ${PKGSRCVER:=2012Q2}

#
#: ${PACKAGES_URL:=ftp://ftp.netbsd.org/pub/pkgsrc/packages/NetBSD/amd64/5.1_$PKGSRCVER/}

#
#: ${REPORT_URL_PREFIX:=http://your-domain.com/~you/pkgsrc/logs/}
if test -n "$BUILD_ID"; then
    : ${REPORT_URL:=$REPORT_URL_PREFIX/`basename $BUILD_ID`/META/report.html}
fi

#
#: ${USER_MAIL:=you@your-domain.com}

# other possible values: report.txt
: ${REPORT_FILE:=report_mini.txt}

: ${MAIL_PROG:=/usr/bin/mail}
if test -n "$BUILD_ID"; then
    : ${REPORT_CMD:=$MAIL_PROG -s \"pkgsrc-$PKGSRCVER $OPSYS $OSVER `basename $BUILD_ID`\" \"$USER_MAIL\"}
fi
: ${REPORT_MINI_SIZE_LIMIT:=65000}

# rsync command for uploading logs and packages
: ${RSYNC_CMD:=rsync}

#
#: ${UPLOAD_PKGS_DEST:=you@your-domain.com:~/public_html/pkgsrc-distbb/packages/}
: ${UPLOAD_PKGS_FILES:=@libexecdir@/upload_pkgs_all_files}
#: ${UPLOAD_PKGS_FILES:=@libexecdir@/upload_pkgs_built_total}
#: ${UPLOAD_PKGS_FILES:=@libexecdir@/upload_pkgs_no_bin_on_cdrom}
#: ${UPLOAD_PKGS_FILES:=@libexecdir@/upload_pkgs_no_bin_on_ftp}
: ${UPLOAD_PKGS_PROG:=rsync_upload}
: ${UPLOAD_PKGS_ATTEMPTS:=5} # 0 - means no limit
: ${UPLOAD_PKGS_PAUSE:=60} # seconds between attempts

#
#: ${UPLOAD_LOGS_DEST:=you@your-domain.com:~/public_html/pkgsrc-distbb/logs/}
: ${UPLOAD_LOGS_PROG:=$RSYNC_CMD -a --delete-excluded --exclude \"*.tmp\" -e ssh}
: ${UPLOAD_LOGS_ATTEMPTS:=5} # 0 - means no limit
: ${UPLOAD_LOGS_PAUSE:=60} # seconds between attempts

# Uncomment the following if you want to send_report before upload_pkgs
#SEND_REPORT_FIRST=yes

# list of building stages, except 'init'
if is_true "$SEND_REPORT_FIRST"; then
    pkgs_n_report='send_report upload_pkgs'
else
    pkgs_n_report='upload_pkgs send_report'
fi
: ${BUILD_STAGES:=build gen_report_data summary checks gen_report update_best checksum upload_logs $pkgs_n_report}

# Extra options passed to paexec(1)
#: ${PAEXEC_EXTRA_OPTS:=-z}
: ${PAEXEC_EXTRA_OPTS:=-Z300 -W2}

# Extra options passed to paexec(1) while running pkg_src_summary(1)
: ${PSS_PAEXEC_EXTRA_OPTS:=$PAEXEC_EXTRA_OPTS}

# Icon file
: ${ICON_FILE:=@icondir@/distbb.ico}

# CSS file
: ${CSS_FILE:=@cssdir@/distbb.css}

# Archivers
: ${GZIP:=gzip}
: ${BZIP2:=bzip2}

# Support for pkgtools/linkver
#: ${LD_PRELOAD:=@libexecdir@/libkver.so}
#: ${LIBKVER_OSRELEASE:=5.1}

############################################################
# variables for cross-builds

# set the following to 1|yes|true for cross-compiling packages
: ${CROSS_COMPILE:=0}

# similar to PACKAGES but for target platform
: ${TARGET_PACKAGES:=$PKGSRCDIR/cross-packages}

# similar to PKG_ALL_SUMMARY but for target platform
: ${TARGET_PKG_ALL_SUMMARY:=$TARGET_PACKAGES/All/pkg_all_summary.txt}

# similar to PKG_SRC_SUMMARY but for target platform
: ${TARGET_PKG_SRC_SUMMARY:=$TARGET_PACKAGES/All/pkg_src_summary.txt}

# similar to PKG_SUMMARY but for target platform
: ${TARGET_PKG_SUMMARY:=$TARGET_PACKAGES/All/pkg_summary.txt}

# similar to PKG_UPDATE_SRC_SUMMARY_CMD but for target platform
: ${TARGET_PKG_UPDATE_SRC_SUMMARY_CMD:=@bindir@/pkg_src_summary -bA > \"$TARGET_PKG_SRC_SUMMARY\"}

############################################################
export PSS_SLAVES
export PSS_OPTIONS
export PSS_FIELDS
export PSS_TRANSPORT
export PSS_PAEXEC_EXTRA_OPTS

export PKG_SUFX
export PKGSRCDIR
export BMAKE

if is_true "$CROSS_COMPILE"; then
    export CROSS_COMPILE
    export TARGET_MAKECONF
fi

